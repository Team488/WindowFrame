// generated from rosidl_adapter/resource/msg.idl.em
// with input from std_msgs/msg\MultiArrayLayout.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/MultiArrayDimension.idl"

module std_msgs {
  module msg {
    @verbatim (language="comment", text=" The multiarray declares a generic multi-dimensional array of a
 particular data type.  Dimensions are ordered from outer most
 to inner most.

 Accessors should ALWAYS be written in terms of dimension stride
 and specified outer-most dimension first.

 multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]

 A standard, 3-channel 640x480 image with interleaved color channels
 would be specified as:

 dim[0].label  = \"height\"
 dim[0].size   = 480
 dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)
 dim[1].label  = \"width\"
 dim[1].size   = 640
 dim[1].stride = 3*640 = 1920
 dim[2].label  = \"channel\"
 dim[2].size   = 3
 dim[2].stride = 3

 multiarray(i,j,k) refers to the ith row, jth column, and kth channel.")
    struct MultiArrayLayout {
      @verbatim (language="comment", text=" Array of dimension properties")
      sequence<std_msgs::msg::MultiArrayDimension> dim;

      @verbatim (language="comment", text=" padding bytes at front of data")
      uint32 data_offset;
    };
  };
};
