// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/visual.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fvisual_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fvisual_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/geometry.pb.h"
#include "ignition/msgs/material.pb.h"
#include "ignition/msgs/plugin.pb.h"
#include "ignition/msgs/vector3d.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fvisual_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fvisual_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fvisual_2eproto;
namespace ignition {
namespace msgs {
class Visual;
class VisualDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern VisualDefaultTypeInternal _Visual_default_instance_;
class Visual_Meta;
class Visual_MetaDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern Visual_MetaDefaultTypeInternal _Visual_Meta_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::Visual* Arena::CreateMaybeMessage<::ignition::msgs::Visual>(Arena*);
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::Visual_Meta* Arena::CreateMaybeMessage<::ignition::msgs::Visual_Meta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

enum Visual_Type : int {
  Visual_Type_ENTITY = 0,
  Visual_Type_MODEL = 1,
  Visual_Type_LINK = 2,
  Visual_Type_VISUAL = 3,
  Visual_Type_COLLISION = 4,
  Visual_Type_SENSOR = 5,
  Visual_Type_GUI = 6,
  Visual_Type_PHYSICS = 7
};
IGNITION_MSGS_VISIBLE bool Visual_Type_IsValid(int value);
constexpr Visual_Type Visual_Type_Type_MIN = Visual_Type_ENTITY;
constexpr Visual_Type Visual_Type_Type_MAX = Visual_Type_PHYSICS;
constexpr int Visual_Type_Type_ARRAYSIZE = Visual_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Visual_Type_descriptor();
template<typename T>
inline const std::string& Visual_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Visual_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Visual_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Visual_Type_descriptor(), enum_t_value);
}
inline bool Visual_Type_Parse(
    const std::string& name, Visual_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Visual_Type>(
    Visual_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Visual_Meta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Visual.Meta) */ {
 public:
  Visual_Meta();
  virtual ~Visual_Meta();

  Visual_Meta(const Visual_Meta& from);
  Visual_Meta(Visual_Meta&& from) noexcept
    : Visual_Meta() {
    *this = ::std::move(from);
  }

  inline Visual_Meta& operator=(const Visual_Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Visual_Meta& operator=(Visual_Meta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Visual_Meta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visual_Meta* internal_default_instance() {
    return reinterpret_cast<const Visual_Meta*>(
               &_Visual_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Visual_Meta& a, Visual_Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Visual_Meta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Visual_Meta* New() const final {
    return CreateMaybeMessage<Visual_Meta>(nullptr);
  }

  Visual_Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Visual_Meta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Visual_Meta& from);
  void MergeFrom(const Visual_Meta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visual_Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.Visual.Meta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fvisual_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fvisual_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 1,
  };
  // optional int32 layer = 1;
  bool has_layer() const;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Visual.Meta)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_;
  friend struct ::TableStruct_ignition_2fmsgs_2fvisual_2eproto;
};
// -------------------------------------------------------------------

class IGNITION_MSGS_VISIBLE Visual :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Visual) */ {
 public:
  Visual();
  virtual ~Visual();

  Visual(const Visual& from);
  Visual(Visual&& from) noexcept
    : Visual() {
    *this = ::std::move(from);
  }

  inline Visual& operator=(const Visual& from) {
    CopyFrom(from);
    return *this;
  }
  inline Visual& operator=(Visual&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Visual& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Visual* internal_default_instance() {
    return reinterpret_cast<const Visual*>(
               &_Visual_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Visual& a, Visual& b) {
    a.Swap(&b);
  }
  inline void Swap(Visual* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Visual* New() const final {
    return CreateMaybeMessage<Visual>(nullptr);
  }

  Visual* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Visual>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Visual& from);
  void MergeFrom(const Visual& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Visual* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.Visual";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fvisual_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fvisual_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Visual_Meta Meta;

  typedef Visual_Type Type;
  static constexpr Type ENTITY =
    Visual_Type_ENTITY;
  static constexpr Type MODEL =
    Visual_Type_MODEL;
  static constexpr Type LINK =
    Visual_Type_LINK;
  static constexpr Type VISUAL =
    Visual_Type_VISUAL;
  static constexpr Type COLLISION =
    Visual_Type_COLLISION;
  static constexpr Type SENSOR =
    Visual_Type_SENSOR;
  static constexpr Type GUI =
    Visual_Type_GUI;
  static constexpr Type PHYSICS =
    Visual_Type_PHYSICS;
  static inline bool Type_IsValid(int value) {
    return Visual_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Visual_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Visual_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Visual_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Visual_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Visual_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Visual_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPluginFieldNumber = 15,
    kNameFieldNumber = 2,
    kParentNameFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 9,
    kGeometryFieldNumber = 10,
    kMaterialFieldNumber = 11,
    kScaleFieldNumber = 16,
    kMetaFieldNumber = 17,
    kIdFieldNumber = 3,
    kParentIdFieldNumber = 5,
    kTransparencyFieldNumber = 7,
    kLaserRetroFieldNumber = 8,
    kCastShadowsFieldNumber = 6,
    kVisibleFieldNumber = 12,
    kDeleteMeFieldNumber = 13,
    kIsStaticFieldNumber = 14,
    kTypeFieldNumber = 18,
  };
  // repeated .ignition.msgs.Plugin plugin = 15;
  int plugin_size() const;
  void clear_plugin();
  ::ignition::msgs::Plugin* mutable_plugin(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Plugin >*
      mutable_plugin();
  const ::ignition::msgs::Plugin& plugin(int index) const;
  ::ignition::msgs::Plugin* add_plugin();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Plugin >&
      plugin() const;

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string parent_name = 4;
  bool has_parent_name() const;
  void clear_parent_name();
  const std::string& parent_name() const;
  void set_parent_name(const std::string& value);
  void set_parent_name(std::string&& value);
  void set_parent_name(const char* value);
  void set_parent_name(const char* value, size_t size);
  std::string* mutable_parent_name();
  std::string* release_parent_name();
  void set_allocated_parent_name(std::string* parent_name);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Pose pose = 9;
  bool has_pose() const;
  void clear_pose();
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* release_pose();
  ::ignition::msgs::Pose* mutable_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional .ignition.msgs.Geometry geometry = 10;
  bool has_geometry() const;
  void clear_geometry();
  const ::ignition::msgs::Geometry& geometry() const;
  ::ignition::msgs::Geometry* release_geometry();
  ::ignition::msgs::Geometry* mutable_geometry();
  void set_allocated_geometry(::ignition::msgs::Geometry* geometry);

  // optional .ignition.msgs.Material material = 11;
  bool has_material() const;
  void clear_material();
  const ::ignition::msgs::Material& material() const;
  ::ignition::msgs::Material* release_material();
  ::ignition::msgs::Material* mutable_material();
  void set_allocated_material(::ignition::msgs::Material* material);

  // optional .ignition.msgs.Vector3d scale = 16;
  bool has_scale() const;
  void clear_scale();
  const ::ignition::msgs::Vector3d& scale() const;
  ::ignition::msgs::Vector3d* release_scale();
  ::ignition::msgs::Vector3d* mutable_scale();
  void set_allocated_scale(::ignition::msgs::Vector3d* scale);

  // optional .ignition.msgs.Visual.Meta meta = 17;
  bool has_meta() const;
  void clear_meta();
  const ::ignition::msgs::Visual_Meta& meta() const;
  ::ignition::msgs::Visual_Meta* release_meta();
  ::ignition::msgs::Visual_Meta* mutable_meta();
  void set_allocated_meta(::ignition::msgs::Visual_Meta* meta);

  // optional uint32 id = 3;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 parent_id = 5;
  bool has_parent_id() const;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional double transparency = 7;
  bool has_transparency() const;
  void clear_transparency();
  double transparency() const;
  void set_transparency(double value);

  // optional double laser_retro = 8;
  bool has_laser_retro() const;
  void clear_laser_retro();
  double laser_retro() const;
  void set_laser_retro(double value);

  // optional bool cast_shadows = 6;
  bool has_cast_shadows() const;
  void clear_cast_shadows();
  bool cast_shadows() const;
  void set_cast_shadows(bool value);

  // optional bool visible = 12;
  bool has_visible() const;
  void clear_visible();
  bool visible() const;
  void set_visible(bool value);

  // optional bool delete_me = 13;
  bool has_delete_me() const;
  void clear_delete_me();
  bool delete_me() const;
  void set_delete_me(bool value);

  // optional bool is_static = 14;
  bool has_is_static() const;
  void clear_is_static();
  bool is_static() const;
  void set_is_static(bool value);

  // optional .ignition.msgs.Visual.Type type = 18;
  bool has_type() const;
  void clear_type();
  ::ignition::msgs::Visual_Type type() const;
  void set_type(::ignition::msgs::Visual_Type value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Visual)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Plugin > plugin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_name_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Pose* pose_;
  ::ignition::msgs::Geometry* geometry_;
  ::ignition::msgs::Material* material_;
  ::ignition::msgs::Vector3d* scale_;
  ::ignition::msgs::Visual_Meta* meta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_id_;
  double transparency_;
  double laser_retro_;
  bool cast_shadows_;
  bool visible_;
  bool delete_me_;
  bool is_static_;
  int type_;
  friend struct ::TableStruct_ignition_2fmsgs_2fvisual_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Visual_Meta

// optional int32 layer = 1;
inline bool Visual_Meta::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Visual_Meta::clear_layer() {
  layer_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Visual_Meta::layer() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.Meta.layer)
  return layer_;
}
inline void Visual_Meta::set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  layer_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.Meta.layer)
}

// -------------------------------------------------------------------

// Visual

// optional .ignition.msgs.Header header = 1;
inline bool Visual::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::ignition::msgs::Header& Visual::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* Visual::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Visual.header)
  _has_bits_[0] &= ~0x00000004u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* Visual::mutable_header() {
  _has_bits_[0] |= 0x00000004u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.header)
  return header_;
}
inline void Visual::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Visual.header)
}

// optional string name = 2;
inline bool Visual::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Visual::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Visual::name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.name)
  return name_.GetNoArena();
}
inline void Visual::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.name)
}
inline void Visual::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Visual.name)
}
inline void Visual::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Visual.name)
}
inline void Visual::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Visual.name)
}
inline std::string* Visual::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Visual::release_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Visual.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Visual::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Visual.name)
}

// optional uint32 id = 3;
inline bool Visual::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Visual::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Visual::id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.id)
  return id_;
}
inline void Visual::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.id)
}

// optional string parent_name = 4;
inline bool Visual::has_parent_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Visual::clear_parent_name() {
  parent_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Visual::parent_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.parent_name)
  return parent_name_.GetNoArena();
}
inline void Visual::set_parent_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.parent_name)
}
inline void Visual::set_parent_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Visual.parent_name)
}
inline void Visual::set_parent_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Visual.parent_name)
}
inline void Visual::set_parent_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parent_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Visual.parent_name)
}
inline std::string* Visual::mutable_parent_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.parent_name)
  return parent_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Visual::release_parent_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Visual.parent_name)
  if (!has_parent_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parent_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Visual::set_allocated_parent_name(std::string* parent_name) {
  if (parent_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parent_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Visual.parent_name)
}

// optional uint32 parent_id = 5;
inline bool Visual::has_parent_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Visual::clear_parent_id() {
  parent_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Visual::parent_id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.parent_id)
  return parent_id_;
}
inline void Visual::set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.parent_id)
}

// optional bool cast_shadows = 6;
inline bool Visual::has_cast_shadows() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Visual::clear_cast_shadows() {
  cast_shadows_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Visual::cast_shadows() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.cast_shadows)
  return cast_shadows_;
}
inline void Visual::set_cast_shadows(bool value) {
  _has_bits_[0] |= 0x00001000u;
  cast_shadows_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.cast_shadows)
}

// optional double transparency = 7;
inline bool Visual::has_transparency() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Visual::clear_transparency() {
  transparency_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Visual::transparency() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.transparency)
  return transparency_;
}
inline void Visual::set_transparency(double value) {
  _has_bits_[0] |= 0x00000400u;
  transparency_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.transparency)
}

// optional double laser_retro = 8;
inline bool Visual::has_laser_retro() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Visual::clear_laser_retro() {
  laser_retro_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Visual::laser_retro() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.laser_retro)
  return laser_retro_;
}
inline void Visual::set_laser_retro(double value) {
  _has_bits_[0] |= 0x00000800u;
  laser_retro_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.laser_retro)
}

// optional .ignition.msgs.Pose pose = 9;
inline bool Visual::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::ignition::msgs::Pose& Visual::pose() const {
  const ::ignition::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Pose*>(
      &::ignition::msgs::_Pose_default_instance_);
}
inline ::ignition::msgs::Pose* Visual::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Visual.pose)
  _has_bits_[0] &= ~0x00000008u;
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Pose* Visual::mutable_pose() {
  _has_bits_[0] |= 0x00000008u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.pose)
  return pose_;
}
inline void Visual::set_allocated_pose(::ignition::msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Visual.pose)
}

// optional .ignition.msgs.Geometry geometry = 10;
inline bool Visual::has_geometry() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::ignition::msgs::Geometry& Visual::geometry() const {
  const ::ignition::msgs::Geometry* p = geometry_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.geometry)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Geometry*>(
      &::ignition::msgs::_Geometry_default_instance_);
}
inline ::ignition::msgs::Geometry* Visual::release_geometry() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Visual.geometry)
  _has_bits_[0] &= ~0x00000010u;
  ::ignition::msgs::Geometry* temp = geometry_;
  geometry_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Geometry* Visual::mutable_geometry() {
  _has_bits_[0] |= 0x00000010u;
  if (geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Geometry>(GetArenaNoVirtual());
    geometry_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.geometry)
  return geometry_;
}
inline void Visual::set_allocated_geometry(::ignition::msgs::Geometry* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry_);
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Visual.geometry)
}

// optional .ignition.msgs.Material material = 11;
inline bool Visual::has_material() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::ignition::msgs::Material& Visual::material() const {
  const ::ignition::msgs::Material* p = material_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.material)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Material*>(
      &::ignition::msgs::_Material_default_instance_);
}
inline ::ignition::msgs::Material* Visual::release_material() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Visual.material)
  _has_bits_[0] &= ~0x00000020u;
  ::ignition::msgs::Material* temp = material_;
  material_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Material* Visual::mutable_material() {
  _has_bits_[0] |= 0x00000020u;
  if (material_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Material>(GetArenaNoVirtual());
    material_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.material)
  return material_;
}
inline void Visual::set_allocated_material(::ignition::msgs::Material* material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(material_);
  }
  if (material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  material_ = material;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Visual.material)
}

// optional bool visible = 12;
inline bool Visual::has_visible() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Visual::clear_visible() {
  visible_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool Visual::visible() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.visible)
  return visible_;
}
inline void Visual::set_visible(bool value) {
  _has_bits_[0] |= 0x00002000u;
  visible_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.visible)
}

// optional bool delete_me = 13;
inline bool Visual::has_delete_me() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Visual::clear_delete_me() {
  delete_me_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool Visual::delete_me() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.delete_me)
  return delete_me_;
}
inline void Visual::set_delete_me(bool value) {
  _has_bits_[0] |= 0x00004000u;
  delete_me_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.delete_me)
}

// optional bool is_static = 14;
inline bool Visual::has_is_static() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Visual::clear_is_static() {
  is_static_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Visual::is_static() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.is_static)
  return is_static_;
}
inline void Visual::set_is_static(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_static_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.is_static)
}

// repeated .ignition.msgs.Plugin plugin = 15;
inline int Visual::plugin_size() const {
  return plugin_.size();
}
inline ::ignition::msgs::Plugin* Visual::mutable_plugin(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.plugin)
  return plugin_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Plugin >*
Visual::mutable_plugin() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Visual.plugin)
  return &plugin_;
}
inline const ::ignition::msgs::Plugin& Visual::plugin(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.plugin)
  return plugin_.Get(index);
}
inline ::ignition::msgs::Plugin* Visual::add_plugin() {
  // @@protoc_insertion_point(field_add:ignition.msgs.Visual.plugin)
  return plugin_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Plugin >&
Visual::plugin() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Visual.plugin)
  return plugin_;
}

// optional .ignition.msgs.Vector3d scale = 16;
inline bool Visual::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::ignition::msgs::Vector3d& Visual::scale() const {
  const ::ignition::msgs::Vector3d* p = scale_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Vector3d*>(
      &::ignition::msgs::_Vector3d_default_instance_);
}
inline ::ignition::msgs::Vector3d* Visual::release_scale() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Visual.scale)
  _has_bits_[0] &= ~0x00000040u;
  ::ignition::msgs::Vector3d* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Vector3d* Visual::mutable_scale() {
  _has_bits_[0] |= 0x00000040u;
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Vector3d>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.scale)
  return scale_;
}
inline void Visual::set_allocated_scale(::ignition::msgs::Vector3d* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Visual.scale)
}

// optional .ignition.msgs.Visual.Meta meta = 17;
inline bool Visual::has_meta() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Visual::clear_meta() {
  if (meta_ != nullptr) meta_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ignition::msgs::Visual_Meta& Visual::meta() const {
  const ::ignition::msgs::Visual_Meta* p = meta_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.meta)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Visual_Meta*>(
      &::ignition::msgs::_Visual_Meta_default_instance_);
}
inline ::ignition::msgs::Visual_Meta* Visual::release_meta() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Visual.meta)
  _has_bits_[0] &= ~0x00000080u;
  ::ignition::msgs::Visual_Meta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Visual_Meta* Visual::mutable_meta() {
  _has_bits_[0] |= 0x00000080u;
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Visual_Meta>(GetArenaNoVirtual());
    meta_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Visual.meta)
  return meta_;
}
inline void Visual::set_allocated_meta(::ignition::msgs::Visual_Meta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Visual.meta)
}

// optional .ignition.msgs.Visual.Type type = 18;
inline bool Visual::has_type() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Visual::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::ignition::msgs::Visual_Type Visual::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Visual.type)
  return static_cast< ::ignition::msgs::Visual_Type >(type_);
}
inline void Visual::set_type(::ignition::msgs::Visual_Type value) {
  assert(::ignition::msgs::Visual_Type_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Visual.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


typedef std::unique_ptr<Visual> VisualUniquePtr;
typedef std::unique_ptr<const Visual> ConstVisualUniquePtr;
typedef std::shared_ptr<Visual> VisualSharedPtr;
typedef std::shared_ptr<const Visual> ConstVisualSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ignition::msgs::Visual_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Visual_Type>() {
  return ::ignition::msgs::Visual_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fvisual_2eproto
