// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/entity_factory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fentity_5ffactory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fentity_5ffactory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/light.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fentity_5ffactory_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fentity_5ffactory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fentity_5ffactory_2eproto;
namespace ignition {
namespace msgs {
class EntityFactory;
class EntityFactoryDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern EntityFactoryDefaultTypeInternal _EntityFactory_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::EntityFactory* Arena::CreateMaybeMessage<::ignition::msgs::EntityFactory>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE EntityFactory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.EntityFactory) */ {
 public:
  EntityFactory();
  virtual ~EntityFactory();

  EntityFactory(const EntityFactory& from);
  EntityFactory(EntityFactory&& from) noexcept
    : EntityFactory() {
    *this = ::std::move(from);
  }

  inline EntityFactory& operator=(const EntityFactory& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityFactory& operator=(EntityFactory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntityFactory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityFactory* internal_default_instance() {
    return reinterpret_cast<const EntityFactory*>(
               &_EntityFactory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntityFactory& a, EntityFactory& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityFactory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntityFactory* New() const final {
    return CreateMaybeMessage<EntityFactory>(nullptr);
  }

  EntityFactory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EntityFactory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EntityFactory& from);
  void MergeFrom(const EntityFactory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityFactory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.EntityFactory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fentity_5ffactory_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fentity_5ffactory_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdfFieldNumber = 2,
    kSdfFilenameFieldNumber = 3,
    kEditNameFieldNumber = 5,
    kCloneModelNameFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 4,
    kLightFieldNumber = 8,
    kAllowRenamingFieldNumber = 7,
  };
  // optional string sdf = 2;
  bool has_sdf() const;
  void clear_sdf();
  const std::string& sdf() const;
  void set_sdf(const std::string& value);
  void set_sdf(std::string&& value);
  void set_sdf(const char* value);
  void set_sdf(const char* value, size_t size);
  std::string* mutable_sdf();
  std::string* release_sdf();
  void set_allocated_sdf(std::string* sdf);

  // optional string sdf_filename = 3;
  bool has_sdf_filename() const;
  void clear_sdf_filename();
  const std::string& sdf_filename() const;
  void set_sdf_filename(const std::string& value);
  void set_sdf_filename(std::string&& value);
  void set_sdf_filename(const char* value);
  void set_sdf_filename(const char* value, size_t size);
  std::string* mutable_sdf_filename();
  std::string* release_sdf_filename();
  void set_allocated_sdf_filename(std::string* sdf_filename);

  // optional string edit_name = 5;
  bool has_edit_name() const;
  void clear_edit_name();
  const std::string& edit_name() const;
  void set_edit_name(const std::string& value);
  void set_edit_name(std::string&& value);
  void set_edit_name(const char* value);
  void set_edit_name(const char* value, size_t size);
  std::string* mutable_edit_name();
  std::string* release_edit_name();
  void set_allocated_edit_name(std::string* edit_name);

  // optional string clone_model_name = 6;
  bool has_clone_model_name() const;
  void clear_clone_model_name();
  const std::string& clone_model_name() const;
  void set_clone_model_name(const std::string& value);
  void set_clone_model_name(std::string&& value);
  void set_clone_model_name(const char* value);
  void set_clone_model_name(const char* value, size_t size);
  std::string* mutable_clone_model_name();
  std::string* release_clone_model_name();
  void set_allocated_clone_model_name(std::string* clone_model_name);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Pose pose = 4;
  bool has_pose() const;
  void clear_pose();
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* release_pose();
  ::ignition::msgs::Pose* mutable_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional .ignition.msgs.Light light = 8;
  bool has_light() const;
  void clear_light();
  const ::ignition::msgs::Light& light() const;
  ::ignition::msgs::Light* release_light();
  ::ignition::msgs::Light* mutable_light();
  void set_allocated_light(::ignition::msgs::Light* light);

  // optional bool allow_renaming = 7;
  bool has_allow_renaming() const;
  void clear_allow_renaming();
  bool allow_renaming() const;
  void set_allow_renaming(bool value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.EntityFactory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdf_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdf_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edit_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clone_model_name_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Pose* pose_;
  ::ignition::msgs::Light* light_;
  bool allow_renaming_;
  friend struct ::TableStruct_ignition_2fmsgs_2fentity_5ffactory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityFactory

// optional .ignition.msgs.Header header = 1;
inline bool EntityFactory::has_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::ignition::msgs::Header& EntityFactory::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* EntityFactory::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.header)
  _has_bits_[0] &= ~0x00000010u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* EntityFactory::mutable_header() {
  _has_bits_[0] |= 0x00000010u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.header)
  return header_;
}
inline void EntityFactory::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.header)
}

// optional string sdf = 2;
inline bool EntityFactory::has_sdf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntityFactory::clear_sdf() {
  sdf_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EntityFactory::sdf() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.sdf)
  return sdf_.GetNoArena();
}
inline void EntityFactory::set_sdf(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.sdf)
}
inline void EntityFactory::set_sdf(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sdf_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.EntityFactory.sdf)
}
inline void EntityFactory::set_sdf(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.EntityFactory.sdf)
}
inline void EntityFactory::set_sdf(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sdf_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.EntityFactory.sdf)
}
inline std::string* EntityFactory::mutable_sdf() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.sdf)
  return sdf_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntityFactory::release_sdf() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.sdf)
  if (!has_sdf()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sdf_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_sdf(std::string* sdf) {
  if (sdf != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sdf_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdf);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.sdf)
}

// optional string sdf_filename = 3;
inline bool EntityFactory::has_sdf_filename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EntityFactory::clear_sdf_filename() {
  sdf_filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EntityFactory::sdf_filename() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.sdf_filename)
  return sdf_filename_.GetNoArena();
}
inline void EntityFactory::set_sdf_filename(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  sdf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.sdf_filename)
}
inline void EntityFactory::set_sdf_filename(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  sdf_filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.EntityFactory.sdf_filename)
}
inline void EntityFactory::set_sdf_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  sdf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.EntityFactory.sdf_filename)
}
inline void EntityFactory::set_sdf_filename(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  sdf_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.EntityFactory.sdf_filename)
}
inline std::string* EntityFactory::mutable_sdf_filename() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.sdf_filename)
  return sdf_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntityFactory::release_sdf_filename() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.sdf_filename)
  if (!has_sdf_filename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return sdf_filename_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_sdf_filename(std::string* sdf_filename) {
  if (sdf_filename != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sdf_filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdf_filename);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.sdf_filename)
}

// optional .ignition.msgs.Pose pose = 4;
inline bool EntityFactory::has_pose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::ignition::msgs::Pose& EntityFactory::pose() const {
  const ::ignition::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Pose*>(
      &::ignition::msgs::_Pose_default_instance_);
}
inline ::ignition::msgs::Pose* EntityFactory::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.pose)
  _has_bits_[0] &= ~0x00000020u;
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Pose* EntityFactory::mutable_pose() {
  _has_bits_[0] |= 0x00000020u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.pose)
  return pose_;
}
inline void EntityFactory::set_allocated_pose(::ignition::msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.pose)
}

// optional string edit_name = 5;
inline bool EntityFactory::has_edit_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EntityFactory::clear_edit_name() {
  edit_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EntityFactory::edit_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.edit_name)
  return edit_name_.GetNoArena();
}
inline void EntityFactory::set_edit_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  edit_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.edit_name)
}
inline void EntityFactory::set_edit_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  edit_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.EntityFactory.edit_name)
}
inline void EntityFactory::set_edit_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  edit_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.EntityFactory.edit_name)
}
inline void EntityFactory::set_edit_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  edit_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.EntityFactory.edit_name)
}
inline std::string* EntityFactory::mutable_edit_name() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.edit_name)
  return edit_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntityFactory::release_edit_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.edit_name)
  if (!has_edit_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return edit_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_edit_name(std::string* edit_name) {
  if (edit_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  edit_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edit_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.edit_name)
}

// optional string clone_model_name = 6;
inline bool EntityFactory::has_clone_model_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EntityFactory::clear_clone_model_name() {
  clone_model_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EntityFactory::clone_model_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.clone_model_name)
  return clone_model_name_.GetNoArena();
}
inline void EntityFactory::set_clone_model_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  clone_model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.clone_model_name)
}
inline void EntityFactory::set_clone_model_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  clone_model_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.EntityFactory.clone_model_name)
}
inline void EntityFactory::set_clone_model_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  clone_model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.EntityFactory.clone_model_name)
}
inline void EntityFactory::set_clone_model_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  clone_model_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.EntityFactory.clone_model_name)
}
inline std::string* EntityFactory::mutable_clone_model_name() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.clone_model_name)
  return clone_model_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EntityFactory::release_clone_model_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.clone_model_name)
  if (!has_clone_model_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return clone_model_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EntityFactory::set_allocated_clone_model_name(std::string* clone_model_name) {
  if (clone_model_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  clone_model_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clone_model_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.clone_model_name)
}

// optional bool allow_renaming = 7;
inline bool EntityFactory::has_allow_renaming() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EntityFactory::clear_allow_renaming() {
  allow_renaming_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool EntityFactory::allow_renaming() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.allow_renaming)
  return allow_renaming_;
}
inline void EntityFactory::set_allow_renaming(bool value) {
  _has_bits_[0] |= 0x00000080u;
  allow_renaming_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.EntityFactory.allow_renaming)
}

// optional .ignition.msgs.Light light = 8;
inline bool EntityFactory::has_light() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::ignition::msgs::Light& EntityFactory::light() const {
  const ::ignition::msgs::Light* p = light_;
  // @@protoc_insertion_point(field_get:ignition.msgs.EntityFactory.light)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Light*>(
      &::ignition::msgs::_Light_default_instance_);
}
inline ::ignition::msgs::Light* EntityFactory::release_light() {
  // @@protoc_insertion_point(field_release:ignition.msgs.EntityFactory.light)
  _has_bits_[0] &= ~0x00000040u;
  ::ignition::msgs::Light* temp = light_;
  light_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Light* EntityFactory::mutable_light() {
  _has_bits_[0] |= 0x00000040u;
  if (light_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Light>(GetArenaNoVirtual());
    light_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.EntityFactory.light)
  return light_;
}
inline void EntityFactory::set_allocated_light(::ignition::msgs::Light* light) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(light_);
  }
  if (light) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      light = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, light, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  light_ = light;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.EntityFactory.light)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<EntityFactory> EntityFactoryUniquePtr;
typedef std::unique_ptr<const EntityFactory> ConstEntityFactoryUniquePtr;
typedef std::shared_ptr<EntityFactory> EntityFactorySharedPtr;
typedef std::shared_ptr<const EntityFactory> ConstEntityFactorySharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fentity_5ffactory_2eproto
