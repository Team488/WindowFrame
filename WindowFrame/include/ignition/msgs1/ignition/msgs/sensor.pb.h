// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/sensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fsensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fsensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/camerasensor.pb.h"
#include "ignition/msgs/raysensor.pb.h"
#include "ignition/msgs/contactsensor.pb.h"
#include "ignition/msgs/logical_camera_sensor.pb.h"
#include "ignition/msgs/gps_sensor.pb.h"
#include "ignition/msgs/imu_sensor.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fsensor_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fsensor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fsensor_2eproto;
namespace ignition {
namespace msgs {
class Sensor;
class SensorDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern SensorDefaultTypeInternal _Sensor_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::Sensor* Arena::CreateMaybeMessage<::ignition::msgs::Sensor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Sensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Sensor) */ {
 public:
  Sensor();
  virtual ~Sensor();

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(nullptr);
  }

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.Sensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fsensor_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fsensor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kParentFieldNumber = 4,
    kTypeFieldNumber = 6,
    kTopicFieldNumber = 14,
    kHeaderFieldNumber = 1,
    kPoseFieldNumber = 9,
    kCameraFieldNumber = 10,
    kRayFieldNumber = 11,
    kContactFieldNumber = 12,
    kLogicalCameraFieldNumber = 15,
    kGpsFieldNumber = 16,
    kImuFieldNumber = 17,
    kIdFieldNumber = 3,
    kParentIdFieldNumber = 5,
    kUpdateRateFieldNumber = 8,
    kAlwaysOnFieldNumber = 7,
    kVisualizeFieldNumber = 13,
  };
  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string parent = 4;
  bool has_parent() const;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);

  // optional string type = 6;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // optional string topic = 14;
  bool has_topic() const;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Pose pose = 9;
  bool has_pose() const;
  void clear_pose();
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* release_pose();
  ::ignition::msgs::Pose* mutable_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional .ignition.msgs.CameraSensor camera = 10;
  bool has_camera() const;
  void clear_camera();
  const ::ignition::msgs::CameraSensor& camera() const;
  ::ignition::msgs::CameraSensor* release_camera();
  ::ignition::msgs::CameraSensor* mutable_camera();
  void set_allocated_camera(::ignition::msgs::CameraSensor* camera);

  // optional .ignition.msgs.RaySensor ray = 11;
  bool has_ray() const;
  void clear_ray();
  const ::ignition::msgs::RaySensor& ray() const;
  ::ignition::msgs::RaySensor* release_ray();
  ::ignition::msgs::RaySensor* mutable_ray();
  void set_allocated_ray(::ignition::msgs::RaySensor* ray);

  // optional .ignition.msgs.ContactSensor contact = 12;
  bool has_contact() const;
  void clear_contact();
  const ::ignition::msgs::ContactSensor& contact() const;
  ::ignition::msgs::ContactSensor* release_contact();
  ::ignition::msgs::ContactSensor* mutable_contact();
  void set_allocated_contact(::ignition::msgs::ContactSensor* contact);

  // optional .ignition.msgs.LogicalCameraSensor logical_camera = 15;
  bool has_logical_camera() const;
  void clear_logical_camera();
  const ::ignition::msgs::LogicalCameraSensor& logical_camera() const;
  ::ignition::msgs::LogicalCameraSensor* release_logical_camera();
  ::ignition::msgs::LogicalCameraSensor* mutable_logical_camera();
  void set_allocated_logical_camera(::ignition::msgs::LogicalCameraSensor* logical_camera);

  // optional .ignition.msgs.GPSSensor gps = 16;
  bool has_gps() const;
  void clear_gps();
  const ::ignition::msgs::GPSSensor& gps() const;
  ::ignition::msgs::GPSSensor* release_gps();
  ::ignition::msgs::GPSSensor* mutable_gps();
  void set_allocated_gps(::ignition::msgs::GPSSensor* gps);

  // optional .ignition.msgs.IMUSensor imu = 17;
  bool has_imu() const;
  void clear_imu();
  const ::ignition::msgs::IMUSensor& imu() const;
  ::ignition::msgs::IMUSensor* release_imu();
  ::ignition::msgs::IMUSensor* mutable_imu();
  void set_allocated_imu(::ignition::msgs::IMUSensor* imu);

  // optional uint32 id = 3;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 parent_id = 5;
  bool has_parent_id() const;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional double update_rate = 8;
  bool has_update_rate() const;
  void clear_update_rate();
  double update_rate() const;
  void set_update_rate(double value);

  // optional bool always_on = 7;
  bool has_always_on() const;
  void clear_always_on();
  bool always_on() const;
  void set_always_on(bool value);

  // optional bool visualize = 13;
  bool has_visualize() const;
  void clear_visualize();
  bool visualize() const;
  void set_visualize(bool value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Sensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Pose* pose_;
  ::ignition::msgs::CameraSensor* camera_;
  ::ignition::msgs::RaySensor* ray_;
  ::ignition::msgs::ContactSensor* contact_;
  ::ignition::msgs::LogicalCameraSensor* logical_camera_;
  ::ignition::msgs::GPSSensor* gps_;
  ::ignition::msgs::IMUSensor* imu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_id_;
  double update_rate_;
  bool always_on_;
  bool visualize_;
  friend struct ::TableStruct_ignition_2fmsgs_2fsensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sensor

// optional .ignition.msgs.Header header = 1;
inline bool Sensor::has_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::ignition::msgs::Header& Sensor::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* Sensor::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.header)
  _has_bits_[0] &= ~0x00000010u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* Sensor::mutable_header() {
  _has_bits_[0] |= 0x00000010u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.header)
  return header_;
}
inline void Sensor::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.header)
}

// optional string name = 2;
inline bool Sensor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sensor::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Sensor::name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.name)
  return name_.GetNoArena();
}
inline void Sensor::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.name)
}
inline void Sensor::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Sensor.name)
}
inline void Sensor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Sensor.name)
}
inline void Sensor::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Sensor.name)
}
inline std::string* Sensor::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sensor::release_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.name)
}

// optional uint32 id = 3;
inline bool Sensor::has_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Sensor::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sensor::id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.id)
  return id_;
}
inline void Sensor::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.id)
}

// optional string parent = 4;
inline bool Sensor::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sensor::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Sensor::parent() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.parent)
  return parent_.GetNoArena();
}
inline void Sensor::set_parent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.parent)
}
inline void Sensor::set_parent(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Sensor.parent)
}
inline void Sensor::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Sensor.parent)
}
inline void Sensor::set_parent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Sensor.parent)
}
inline std::string* Sensor::mutable_parent() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.parent)
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sensor::release_parent() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.parent)
  if (!has_parent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.parent)
}

// optional uint32 parent_id = 5;
inline bool Sensor::has_parent_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Sensor::clear_parent_id() {
  parent_id_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Sensor::parent_id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.parent_id)
  return parent_id_;
}
inline void Sensor::set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.parent_id)
}

// optional string type = 6;
inline bool Sensor::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sensor::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Sensor::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.type)
  return type_.GetNoArena();
}
inline void Sensor::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.type)
}
inline void Sensor::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Sensor.type)
}
inline void Sensor::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Sensor.type)
}
inline void Sensor::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Sensor.type)
}
inline std::string* Sensor::mutable_type() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sensor::release_type() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.type)
}

// optional bool always_on = 7;
inline bool Sensor::has_always_on() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Sensor::clear_always_on() {
  always_on_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool Sensor::always_on() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.always_on)
  return always_on_;
}
inline void Sensor::set_always_on(bool value) {
  _has_bits_[0] |= 0x00008000u;
  always_on_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.always_on)
}

// optional double update_rate = 8;
inline bool Sensor::has_update_rate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Sensor::clear_update_rate() {
  update_rate_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Sensor::update_rate() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.update_rate)
  return update_rate_;
}
inline void Sensor::set_update_rate(double value) {
  _has_bits_[0] |= 0x00004000u;
  update_rate_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.update_rate)
}

// optional .ignition.msgs.Pose pose = 9;
inline bool Sensor::has_pose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::ignition::msgs::Pose& Sensor::pose() const {
  const ::ignition::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Pose*>(
      &::ignition::msgs::_Pose_default_instance_);
}
inline ::ignition::msgs::Pose* Sensor::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.pose)
  _has_bits_[0] &= ~0x00000020u;
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Pose* Sensor::mutable_pose() {
  _has_bits_[0] |= 0x00000020u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.pose)
  return pose_;
}
inline void Sensor::set_allocated_pose(::ignition::msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.pose)
}

// optional .ignition.msgs.CameraSensor camera = 10;
inline bool Sensor::has_camera() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::ignition::msgs::CameraSensor& Sensor::camera() const {
  const ::ignition::msgs::CameraSensor* p = camera_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.camera)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::CameraSensor*>(
      &::ignition::msgs::_CameraSensor_default_instance_);
}
inline ::ignition::msgs::CameraSensor* Sensor::release_camera() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.camera)
  _has_bits_[0] &= ~0x00000040u;
  ::ignition::msgs::CameraSensor* temp = camera_;
  camera_ = nullptr;
  return temp;
}
inline ::ignition::msgs::CameraSensor* Sensor::mutable_camera() {
  _has_bits_[0] |= 0x00000040u;
  if (camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::CameraSensor>(GetArenaNoVirtual());
    camera_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.camera)
  return camera_;
}
inline void Sensor::set_allocated_camera(::ignition::msgs::CameraSensor* camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_);
  }
  if (camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  camera_ = camera;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.camera)
}

// optional .ignition.msgs.RaySensor ray = 11;
inline bool Sensor::has_ray() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::ignition::msgs::RaySensor& Sensor::ray() const {
  const ::ignition::msgs::RaySensor* p = ray_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.ray)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::RaySensor*>(
      &::ignition::msgs::_RaySensor_default_instance_);
}
inline ::ignition::msgs::RaySensor* Sensor::release_ray() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.ray)
  _has_bits_[0] &= ~0x00000080u;
  ::ignition::msgs::RaySensor* temp = ray_;
  ray_ = nullptr;
  return temp;
}
inline ::ignition::msgs::RaySensor* Sensor::mutable_ray() {
  _has_bits_[0] |= 0x00000080u;
  if (ray_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::RaySensor>(GetArenaNoVirtual());
    ray_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.ray)
  return ray_;
}
inline void Sensor::set_allocated_ray(::ignition::msgs::RaySensor* ray) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ray_);
  }
  if (ray) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ray = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ray, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  ray_ = ray;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.ray)
}

// optional .ignition.msgs.ContactSensor contact = 12;
inline bool Sensor::has_contact() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline const ::ignition::msgs::ContactSensor& Sensor::contact() const {
  const ::ignition::msgs::ContactSensor* p = contact_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.contact)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::ContactSensor*>(
      &::ignition::msgs::_ContactSensor_default_instance_);
}
inline ::ignition::msgs::ContactSensor* Sensor::release_contact() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.contact)
  _has_bits_[0] &= ~0x00000100u;
  ::ignition::msgs::ContactSensor* temp = contact_;
  contact_ = nullptr;
  return temp;
}
inline ::ignition::msgs::ContactSensor* Sensor::mutable_contact() {
  _has_bits_[0] |= 0x00000100u;
  if (contact_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::ContactSensor>(GetArenaNoVirtual());
    contact_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.contact)
  return contact_;
}
inline void Sensor::set_allocated_contact(::ignition::msgs::ContactSensor* contact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact_);
  }
  if (contact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contact, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  contact_ = contact;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.contact)
}

// optional bool visualize = 13;
inline bool Sensor::has_visualize() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Sensor::clear_visualize() {
  visualize_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool Sensor::visualize() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.visualize)
  return visualize_;
}
inline void Sensor::set_visualize(bool value) {
  _has_bits_[0] |= 0x00010000u;
  visualize_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.visualize)
}

// optional string topic = 14;
inline bool Sensor::has_topic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sensor::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Sensor::topic() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.topic)
  return topic_.GetNoArena();
}
inline void Sensor::set_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Sensor.topic)
}
inline void Sensor::set_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Sensor.topic)
}
inline void Sensor::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Sensor.topic)
}
inline void Sensor::set_topic(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Sensor.topic)
}
inline std::string* Sensor::mutable_topic() {
  _has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.topic)
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sensor::release_topic() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.topic)
  if (!has_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return topic_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.topic)
}

// optional .ignition.msgs.LogicalCameraSensor logical_camera = 15;
inline bool Sensor::has_logical_camera() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline const ::ignition::msgs::LogicalCameraSensor& Sensor::logical_camera() const {
  const ::ignition::msgs::LogicalCameraSensor* p = logical_camera_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.logical_camera)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::LogicalCameraSensor*>(
      &::ignition::msgs::_LogicalCameraSensor_default_instance_);
}
inline ::ignition::msgs::LogicalCameraSensor* Sensor::release_logical_camera() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.logical_camera)
  _has_bits_[0] &= ~0x00000200u;
  ::ignition::msgs::LogicalCameraSensor* temp = logical_camera_;
  logical_camera_ = nullptr;
  return temp;
}
inline ::ignition::msgs::LogicalCameraSensor* Sensor::mutable_logical_camera() {
  _has_bits_[0] |= 0x00000200u;
  if (logical_camera_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::LogicalCameraSensor>(GetArenaNoVirtual());
    logical_camera_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.logical_camera)
  return logical_camera_;
}
inline void Sensor::set_allocated_logical_camera(::ignition::msgs::LogicalCameraSensor* logical_camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logical_camera_);
  }
  if (logical_camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logical_camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical_camera, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  logical_camera_ = logical_camera;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.logical_camera)
}

// optional .ignition.msgs.GPSSensor gps = 16;
inline bool Sensor::has_gps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline const ::ignition::msgs::GPSSensor& Sensor::gps() const {
  const ::ignition::msgs::GPSSensor* p = gps_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.gps)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::GPSSensor*>(
      &::ignition::msgs::_GPSSensor_default_instance_);
}
inline ::ignition::msgs::GPSSensor* Sensor::release_gps() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.gps)
  _has_bits_[0] &= ~0x00000400u;
  ::ignition::msgs::GPSSensor* temp = gps_;
  gps_ = nullptr;
  return temp;
}
inline ::ignition::msgs::GPSSensor* Sensor::mutable_gps() {
  _has_bits_[0] |= 0x00000400u;
  if (gps_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::GPSSensor>(GetArenaNoVirtual());
    gps_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.gps)
  return gps_;
}
inline void Sensor::set_allocated_gps(::ignition::msgs::GPSSensor* gps) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_);
  }
  if (gps) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gps = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  gps_ = gps;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.gps)
}

// optional .ignition.msgs.IMUSensor imu = 17;
inline bool Sensor::has_imu() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline const ::ignition::msgs::IMUSensor& Sensor::imu() const {
  const ::ignition::msgs::IMUSensor* p = imu_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Sensor.imu)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::IMUSensor*>(
      &::ignition::msgs::_IMUSensor_default_instance_);
}
inline ::ignition::msgs::IMUSensor* Sensor::release_imu() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Sensor.imu)
  _has_bits_[0] &= ~0x00000800u;
  ::ignition::msgs::IMUSensor* temp = imu_;
  imu_ = nullptr;
  return temp;
}
inline ::ignition::msgs::IMUSensor* Sensor::mutable_imu() {
  _has_bits_[0] |= 0x00000800u;
  if (imu_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::IMUSensor>(GetArenaNoVirtual());
    imu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Sensor.imu)
  return imu_;
}
inline void Sensor::set_allocated_imu(::ignition::msgs::IMUSensor* imu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(imu_);
  }
  if (imu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  imu_ = imu;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Sensor.imu)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<Sensor> SensorUniquePtr;
typedef std::unique_ptr<const Sensor> ConstSensorUniquePtr;
typedef std::shared_ptr<Sensor> SensorSharedPtr;
typedef std::shared_ptr<const Sensor> ConstSensorSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fsensor_2eproto
