// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fpacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fpacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/image.pb.h"
#include "ignition/msgs/stringmsg_v.pb.h"
#include "ignition/msgs/web_request.pb.h"
#include "ignition/msgs/cmd_vel2d.pb.h"
#include "ignition/msgs/double_v.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fpacket_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fpacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fpacket_2eproto;
namespace ignition {
namespace msgs {
class Packet;
class PacketDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern PacketDefaultTypeInternal _Packet_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::Packet* Arena::CreateMaybeMessage<::ignition::msgs::Packet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE Packet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  enum ContentCase {
    kCmdVel2D = 3,
    kImage = 4,
    kStringMsgV = 5,
    kWebRequest = 6,
    kPose = 7,
    kDoublev = 8,
    CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.Packet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fpacket_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fpacket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kTypeFieldNumber = 2,
    kCmdVel2DFieldNumber = 3,
    kImageFieldNumber = 4,
    kStringMsgVFieldNumber = 5,
    kWebRequestFieldNumber = 6,
    kPoseFieldNumber = 7,
    kDoublevFieldNumber = 8,
  };
  // optional string topic = 1;
  bool has_topic() const;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);

  // optional string type = 2;
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // optional .ignition.msgs.CmdVel2D cmd_vel2d = 3;
  bool has_cmd_vel2d() const;
  void clear_cmd_vel2d();
  const ::ignition::msgs::CmdVel2D& cmd_vel2d() const;
  ::ignition::msgs::CmdVel2D* release_cmd_vel2d();
  ::ignition::msgs::CmdVel2D* mutable_cmd_vel2d();
  void set_allocated_cmd_vel2d(::ignition::msgs::CmdVel2D* cmd_vel2d);

  // optional .ignition.msgs.Image image = 4;
  bool has_image() const;
  void clear_image();
  const ::ignition::msgs::Image& image() const;
  ::ignition::msgs::Image* release_image();
  ::ignition::msgs::Image* mutable_image();
  void set_allocated_image(::ignition::msgs::Image* image);

  // optional .ignition.msgs.StringMsg_V string_msg_v = 5;
  bool has_string_msg_v() const;
  void clear_string_msg_v();
  const ::ignition::msgs::StringMsg_V& string_msg_v() const;
  ::ignition::msgs::StringMsg_V* release_string_msg_v();
  ::ignition::msgs::StringMsg_V* mutable_string_msg_v();
  void set_allocated_string_msg_v(::ignition::msgs::StringMsg_V* string_msg_v);

  // optional .ignition.msgs.WebRequest web_request = 6;
  bool has_web_request() const;
  void clear_web_request();
  const ::ignition::msgs::WebRequest& web_request() const;
  ::ignition::msgs::WebRequest* release_web_request();
  ::ignition::msgs::WebRequest* mutable_web_request();
  void set_allocated_web_request(::ignition::msgs::WebRequest* web_request);

  // optional .ignition.msgs.Pose pose = 7;
  bool has_pose() const;
  void clear_pose();
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* release_pose();
  ::ignition::msgs::Pose* mutable_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional .ignition.msgs.Double_V doublev = 8;
  bool has_doublev() const;
  void clear_doublev();
  const ::ignition::msgs::Double_V& doublev() const;
  ::ignition::msgs::Double_V* release_doublev();
  ::ignition::msgs::Double_V* mutable_doublev();
  void set_allocated_doublev(::ignition::msgs::Double_V* doublev);

  void clear_content();
  ContentCase content_case() const;
  // @@protoc_insertion_point(class_scope:ignition.msgs.Packet)
 private:
  class _Internal;
  void set_has_cmd_vel2d();
  void set_has_image();
  void set_has_string_msg_v();
  void set_has_web_request();
  void set_has_pose();
  void set_has_doublev();

  inline bool has_content() const;
  inline void clear_has_content();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  union ContentUnion {
    ContentUnion() {}
    ::ignition::msgs::CmdVel2D* cmd_vel2d_;
    ::ignition::msgs::Image* image_;
    ::ignition::msgs::StringMsg_V* string_msg_v_;
    ::ignition::msgs::WebRequest* web_request_;
    ::ignition::msgs::Pose* pose_;
    ::ignition::msgs::Double_V* doublev_;
  } content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ignition_2fmsgs_2fpacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// optional string topic = 1;
inline bool Packet::has_topic() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Packet::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Packet::topic() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.topic)
  return topic_.GetNoArena();
}
inline void Packet::set_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Packet.topic)
}
inline void Packet::set_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Packet.topic)
}
inline void Packet::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Packet.topic)
}
inline void Packet::set_topic(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Packet.topic)
}
inline std::string* Packet::mutable_topic() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.topic)
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Packet::release_topic() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.topic)
  if (!has_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return topic_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.topic)
}

// optional string type = 2;
inline bool Packet::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Packet::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Packet::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.type)
  return type_.GetNoArena();
}
inline void Packet::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Packet.type)
}
inline void Packet::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Packet.type)
}
inline void Packet::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Packet.type)
}
inline void Packet::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Packet.type)
}
inline std::string* Packet::mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Packet::release_type() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Packet::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Packet.type)
}

// optional .ignition.msgs.CmdVel2D cmd_vel2d = 3;
inline bool Packet::has_cmd_vel2d() const {
  return content_case() == kCmdVel2D;
}
inline void Packet::set_has_cmd_vel2d() {
  _oneof_case_[0] = kCmdVel2D;
}
inline ::ignition::msgs::CmdVel2D* Packet::release_cmd_vel2d() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.cmd_vel2d)
  if (has_cmd_vel2d()) {
    clear_has_content();
      ::ignition::msgs::CmdVel2D* temp = content_.cmd_vel2d_;
    content_.cmd_vel2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ignition::msgs::CmdVel2D& Packet::cmd_vel2d() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.cmd_vel2d)
  return has_cmd_vel2d()
      ? *content_.cmd_vel2d_
      : *reinterpret_cast< ::ignition::msgs::CmdVel2D*>(&::ignition::msgs::_CmdVel2D_default_instance_);
}
inline ::ignition::msgs::CmdVel2D* Packet::mutable_cmd_vel2d() {
  if (!has_cmd_vel2d()) {
    clear_content();
    set_has_cmd_vel2d();
    content_.cmd_vel2d_ = CreateMaybeMessage< ::ignition::msgs::CmdVel2D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.cmd_vel2d)
  return content_.cmd_vel2d_;
}

// optional .ignition.msgs.Image image = 4;
inline bool Packet::has_image() const {
  return content_case() == kImage;
}
inline void Packet::set_has_image() {
  _oneof_case_[0] = kImage;
}
inline ::ignition::msgs::Image* Packet::release_image() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.image)
  if (has_image()) {
    clear_has_content();
      ::ignition::msgs::Image* temp = content_.image_;
    content_.image_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ignition::msgs::Image& Packet::image() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.image)
  return has_image()
      ? *content_.image_
      : *reinterpret_cast< ::ignition::msgs::Image*>(&::ignition::msgs::_Image_default_instance_);
}
inline ::ignition::msgs::Image* Packet::mutable_image() {
  if (!has_image()) {
    clear_content();
    set_has_image();
    content_.image_ = CreateMaybeMessage< ::ignition::msgs::Image >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.image)
  return content_.image_;
}

// optional .ignition.msgs.StringMsg_V string_msg_v = 5;
inline bool Packet::has_string_msg_v() const {
  return content_case() == kStringMsgV;
}
inline void Packet::set_has_string_msg_v() {
  _oneof_case_[0] = kStringMsgV;
}
inline ::ignition::msgs::StringMsg_V* Packet::release_string_msg_v() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.string_msg_v)
  if (has_string_msg_v()) {
    clear_has_content();
      ::ignition::msgs::StringMsg_V* temp = content_.string_msg_v_;
    content_.string_msg_v_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ignition::msgs::StringMsg_V& Packet::string_msg_v() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.string_msg_v)
  return has_string_msg_v()
      ? *content_.string_msg_v_
      : *reinterpret_cast< ::ignition::msgs::StringMsg_V*>(&::ignition::msgs::_StringMsg_V_default_instance_);
}
inline ::ignition::msgs::StringMsg_V* Packet::mutable_string_msg_v() {
  if (!has_string_msg_v()) {
    clear_content();
    set_has_string_msg_v();
    content_.string_msg_v_ = CreateMaybeMessage< ::ignition::msgs::StringMsg_V >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.string_msg_v)
  return content_.string_msg_v_;
}

// optional .ignition.msgs.WebRequest web_request = 6;
inline bool Packet::has_web_request() const {
  return content_case() == kWebRequest;
}
inline void Packet::set_has_web_request() {
  _oneof_case_[0] = kWebRequest;
}
inline ::ignition::msgs::WebRequest* Packet::release_web_request() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.web_request)
  if (has_web_request()) {
    clear_has_content();
      ::ignition::msgs::WebRequest* temp = content_.web_request_;
    content_.web_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ignition::msgs::WebRequest& Packet::web_request() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.web_request)
  return has_web_request()
      ? *content_.web_request_
      : *reinterpret_cast< ::ignition::msgs::WebRequest*>(&::ignition::msgs::_WebRequest_default_instance_);
}
inline ::ignition::msgs::WebRequest* Packet::mutable_web_request() {
  if (!has_web_request()) {
    clear_content();
    set_has_web_request();
    content_.web_request_ = CreateMaybeMessage< ::ignition::msgs::WebRequest >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.web_request)
  return content_.web_request_;
}

// optional .ignition.msgs.Pose pose = 7;
inline bool Packet::has_pose() const {
  return content_case() == kPose;
}
inline void Packet::set_has_pose() {
  _oneof_case_[0] = kPose;
}
inline ::ignition::msgs::Pose* Packet::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.pose)
  if (has_pose()) {
    clear_has_content();
      ::ignition::msgs::Pose* temp = content_.pose_;
    content_.pose_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ignition::msgs::Pose& Packet::pose() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.pose)
  return has_pose()
      ? *content_.pose_
      : *reinterpret_cast< ::ignition::msgs::Pose*>(&::ignition::msgs::_Pose_default_instance_);
}
inline ::ignition::msgs::Pose* Packet::mutable_pose() {
  if (!has_pose()) {
    clear_content();
    set_has_pose();
    content_.pose_ = CreateMaybeMessage< ::ignition::msgs::Pose >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.pose)
  return content_.pose_;
}

// optional .ignition.msgs.Double_V doublev = 8;
inline bool Packet::has_doublev() const {
  return content_case() == kDoublev;
}
inline void Packet::set_has_doublev() {
  _oneof_case_[0] = kDoublev;
}
inline ::ignition::msgs::Double_V* Packet::release_doublev() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Packet.doublev)
  if (has_doublev()) {
    clear_has_content();
      ::ignition::msgs::Double_V* temp = content_.doublev_;
    content_.doublev_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ignition::msgs::Double_V& Packet::doublev() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Packet.doublev)
  return has_doublev()
      ? *content_.doublev_
      : *reinterpret_cast< ::ignition::msgs::Double_V*>(&::ignition::msgs::_Double_V_default_instance_);
}
inline ::ignition::msgs::Double_V* Packet::mutable_doublev() {
  if (!has_doublev()) {
    clear_content();
    set_has_doublev();
    content_.doublev_ = CreateMaybeMessage< ::ignition::msgs::Double_V >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Packet.doublev)
  return content_.doublev_;
}

inline bool Packet::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
inline void Packet::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
inline Packet::ContentCase Packet::content_case() const {
  return Packet::ContentCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<Packet> PacketUniquePtr;
typedef std::unique_ptr<const Packet> ConstPacketUniquePtr;
typedef std::shared_ptr<Packet> PacketSharedPtr;
typedef std::shared_ptr<const Packet> ConstPacketSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fpacket_2eproto
