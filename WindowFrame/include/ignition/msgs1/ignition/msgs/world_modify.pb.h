// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/world_modify.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fworld_5fmodify_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fworld_5fmodify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fworld_5fmodify_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fworld_5fmodify_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fworld_5fmodify_2eproto;
namespace ignition {
namespace msgs {
class WorldModify;
class WorldModifyDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern WorldModifyDefaultTypeInternal _WorldModify_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::WorldModify* Arena::CreateMaybeMessage<::ignition::msgs::WorldModify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE WorldModify :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.WorldModify) */ {
 public:
  WorldModify();
  virtual ~WorldModify();

  WorldModify(const WorldModify& from);
  WorldModify(WorldModify&& from) noexcept
    : WorldModify() {
    *this = ::std::move(from);
  }

  inline WorldModify& operator=(const WorldModify& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldModify& operator=(WorldModify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldModify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldModify* internal_default_instance() {
    return reinterpret_cast<const WorldModify*>(
               &_WorldModify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WorldModify& a, WorldModify& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldModify* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldModify* New() const final {
    return CreateMaybeMessage<WorldModify>(nullptr);
  }

  WorldModify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldModify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldModify& from);
  void MergeFrom(const WorldModify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldModify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.WorldModify";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fworld_5fmodify_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fworld_5fmodify_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldNameFieldNumber = 2,
    kClonedUriFieldNumber = 6,
    kHeaderFieldNumber = 1,
    kRemoveFieldNumber = 3,
    kCreateFieldNumber = 4,
    kClonedFieldNumber = 5,
  };
  // optional string world_name = 2;
  bool has_world_name() const;
  void clear_world_name();
  const std::string& world_name() const;
  void set_world_name(const std::string& value);
  void set_world_name(std::string&& value);
  void set_world_name(const char* value);
  void set_world_name(const char* value, size_t size);
  std::string* mutable_world_name();
  std::string* release_world_name();
  void set_allocated_world_name(std::string* world_name);

  // optional string cloned_uri = 6;
  bool has_cloned_uri() const;
  void clear_cloned_uri();
  const std::string& cloned_uri() const;
  void set_cloned_uri(const std::string& value);
  void set_cloned_uri(std::string&& value);
  void set_cloned_uri(const char* value);
  void set_cloned_uri(const char* value, size_t size);
  std::string* mutable_cloned_uri();
  std::string* release_cloned_uri();
  void set_allocated_cloned_uri(std::string* cloned_uri);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional bool remove = 3;
  bool has_remove() const;
  void clear_remove();
  bool remove() const;
  void set_remove(bool value);

  // optional bool create = 4;
  bool has_create() const;
  void clear_create();
  bool create() const;
  void set_create(bool value);

  // optional bool cloned = 5;
  bool has_cloned() const;
  void clear_cloned();
  bool cloned() const;
  void set_cloned(bool value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.WorldModify)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloned_uri_;
  ::ignition::msgs::Header* header_;
  bool remove_;
  bool create_;
  bool cloned_;
  friend struct ::TableStruct_ignition_2fmsgs_2fworld_5fmodify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WorldModify

// optional .ignition.msgs.Header header = 1;
inline bool WorldModify::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::ignition::msgs::Header& WorldModify::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.WorldModify.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* WorldModify::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.WorldModify.header)
  _has_bits_[0] &= ~0x00000004u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* WorldModify::mutable_header() {
  _has_bits_[0] |= 0x00000004u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.WorldModify.header)
  return header_;
}
inline void WorldModify::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.WorldModify.header)
}

// optional string world_name = 2;
inline bool WorldModify::has_world_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldModify::clear_world_name() {
  world_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WorldModify::world_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WorldModify.world_name)
  return world_name_.GetNoArena();
}
inline void WorldModify::set_world_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  world_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.WorldModify.world_name)
}
inline void WorldModify::set_world_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  world_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.WorldModify.world_name)
}
inline void WorldModify::set_world_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  world_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.WorldModify.world_name)
}
inline void WorldModify::set_world_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  world_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.WorldModify.world_name)
}
inline std::string* WorldModify::mutable_world_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.WorldModify.world_name)
  return world_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorldModify::release_world_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.WorldModify.world_name)
  if (!has_world_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return world_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorldModify::set_allocated_world_name(std::string* world_name) {
  if (world_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  world_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.WorldModify.world_name)
}

// optional bool remove = 3;
inline bool WorldModify::has_remove() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldModify::clear_remove() {
  remove_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool WorldModify::remove() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WorldModify.remove)
  return remove_;
}
inline void WorldModify::set_remove(bool value) {
  _has_bits_[0] |= 0x00000008u;
  remove_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.WorldModify.remove)
}

// optional bool create = 4;
inline bool WorldModify::has_create() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldModify::clear_create() {
  create_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool WorldModify::create() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WorldModify.create)
  return create_;
}
inline void WorldModify::set_create(bool value) {
  _has_bits_[0] |= 0x00000010u;
  create_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.WorldModify.create)
}

// optional bool cloned = 5;
inline bool WorldModify::has_cloned() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WorldModify::clear_cloned() {
  cloned_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool WorldModify::cloned() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WorldModify.cloned)
  return cloned_;
}
inline void WorldModify::set_cloned(bool value) {
  _has_bits_[0] |= 0x00000020u;
  cloned_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.WorldModify.cloned)
}

// optional string cloned_uri = 6;
inline bool WorldModify::has_cloned_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldModify::clear_cloned_uri() {
  cloned_uri_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WorldModify::cloned_uri() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.WorldModify.cloned_uri)
  return cloned_uri_.GetNoArena();
}
inline void WorldModify::set_cloned_uri(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cloned_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.WorldModify.cloned_uri)
}
inline void WorldModify::set_cloned_uri(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  cloned_uri_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.WorldModify.cloned_uri)
}
inline void WorldModify::set_cloned_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  cloned_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.WorldModify.cloned_uri)
}
inline void WorldModify::set_cloned_uri(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  cloned_uri_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.WorldModify.cloned_uri)
}
inline std::string* WorldModify::mutable_cloned_uri() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.WorldModify.cloned_uri)
  return cloned_uri_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorldModify::release_cloned_uri() {
  // @@protoc_insertion_point(field_release:ignition.msgs.WorldModify.cloned_uri)
  if (!has_cloned_uri()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return cloned_uri_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorldModify::set_allocated_cloned_uri(std::string* cloned_uri) {
  if (cloned_uri != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cloned_uri_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloned_uri);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.WorldModify.cloned_uri)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<WorldModify> WorldModifyUniquePtr;
typedef std::unique_ptr<const WorldModify> ConstWorldModifyUniquePtr;
typedef std::shared_ptr<WorldModify> WorldModifySharedPtr;
typedef std::shared_ptr<const WorldModify> ConstWorldModifySharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fworld_5fmodify_2eproto
