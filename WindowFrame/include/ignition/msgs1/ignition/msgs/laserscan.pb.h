// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/laserscan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2flaserscan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2flaserscan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2flaserscan_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2flaserscan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2flaserscan_2eproto;
namespace ignition {
namespace msgs {
class LaserScan;
class LaserScanDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern LaserScanDefaultTypeInternal _LaserScan_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::LaserScan* Arena::CreateMaybeMessage<::ignition::msgs::LaserScan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE LaserScan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.LaserScan) */ {
 public:
  LaserScan();
  virtual ~LaserScan();

  LaserScan(const LaserScan& from);
  LaserScan(LaserScan&& from) noexcept
    : LaserScan() {
    *this = ::std::move(from);
  }

  inline LaserScan& operator=(const LaserScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaserScan& operator=(LaserScan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaserScan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaserScan* internal_default_instance() {
    return reinterpret_cast<const LaserScan*>(
               &_LaserScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LaserScan& a, LaserScan& b) {
    a.Swap(&b);
  }
  inline void Swap(LaserScan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaserScan* New() const final {
    return CreateMaybeMessage<LaserScan>(nullptr);
  }

  LaserScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaserScan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaserScan& from);
  void MergeFrom(const LaserScan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaserScan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.LaserScan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2flaserscan_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2flaserscan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangesFieldNumber = 14,
    kIntensitiesFieldNumber = 15,
    kFrameFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kWorldPoseFieldNumber = 3,
    kAngleMinFieldNumber = 4,
    kAngleMaxFieldNumber = 5,
    kAngleStepFieldNumber = 6,
    kRangeMinFieldNumber = 7,
    kRangeMaxFieldNumber = 8,
    kVerticalAngleMinFieldNumber = 10,
    kVerticalAngleMaxFieldNumber = 11,
    kCountFieldNumber = 9,
    kVerticalCountFieldNumber = 13,
    kVerticalAngleStepFieldNumber = 12,
  };
  // repeated double ranges = 14;
  int ranges_size() const;
  void clear_ranges();
  double ranges(int index) const;
  void set_ranges(int index, double value);
  void add_ranges(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      ranges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_ranges();

  // repeated double intensities = 15;
  int intensities_size() const;
  void clear_intensities();
  double intensities(int index) const;
  void set_intensities(int index, double value);
  void add_intensities(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      intensities() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_intensities();

  // optional string frame = 2;
  bool has_frame() const;
  void clear_frame();
  const std::string& frame() const;
  void set_frame(const std::string& value);
  void set_frame(std::string&& value);
  void set_frame(const char* value);
  void set_frame(const char* value, size_t size);
  std::string* mutable_frame();
  std::string* release_frame();
  void set_allocated_frame(std::string* frame);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Pose world_pose = 3;
  bool has_world_pose() const;
  void clear_world_pose();
  const ::ignition::msgs::Pose& world_pose() const;
  ::ignition::msgs::Pose* release_world_pose();
  ::ignition::msgs::Pose* mutable_world_pose();
  void set_allocated_world_pose(::ignition::msgs::Pose* world_pose);

  // optional double angle_min = 4;
  bool has_angle_min() const;
  void clear_angle_min();
  double angle_min() const;
  void set_angle_min(double value);

  // optional double angle_max = 5;
  bool has_angle_max() const;
  void clear_angle_max();
  double angle_max() const;
  void set_angle_max(double value);

  // optional double angle_step = 6;
  bool has_angle_step() const;
  void clear_angle_step();
  double angle_step() const;
  void set_angle_step(double value);

  // optional double range_min = 7;
  bool has_range_min() const;
  void clear_range_min();
  double range_min() const;
  void set_range_min(double value);

  // optional double range_max = 8;
  bool has_range_max() const;
  void clear_range_max();
  double range_max() const;
  void set_range_max(double value);

  // optional double vertical_angle_min = 10;
  bool has_vertical_angle_min() const;
  void clear_vertical_angle_min();
  double vertical_angle_min() const;
  void set_vertical_angle_min(double value);

  // optional double vertical_angle_max = 11;
  bool has_vertical_angle_max() const;
  void clear_vertical_angle_max();
  double vertical_angle_max() const;
  void set_vertical_angle_max(double value);

  // optional uint32 count = 9;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 vertical_count = 13;
  bool has_vertical_count() const;
  void clear_vertical_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 vertical_count() const;
  void set_vertical_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional double vertical_angle_step = 12;
  bool has_vertical_angle_step() const;
  void clear_vertical_angle_step();
  double vertical_angle_step() const;
  void set_vertical_angle_step(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.LaserScan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > ranges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > intensities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Pose* world_pose_;
  double angle_min_;
  double angle_max_;
  double angle_step_;
  double range_min_;
  double range_max_;
  double vertical_angle_min_;
  double vertical_angle_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vertical_count_;
  double vertical_angle_step_;
  friend struct ::TableStruct_ignition_2fmsgs_2flaserscan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LaserScan

// optional .ignition.msgs.Header header = 1;
inline bool LaserScan::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::ignition::msgs::Header& LaserScan::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* LaserScan::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.LaserScan.header)
  _has_bits_[0] &= ~0x00000002u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* LaserScan::mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.LaserScan.header)
  return header_;
}
inline void LaserScan::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.LaserScan.header)
}

// optional string frame = 2;
inline bool LaserScan::has_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LaserScan::clear_frame() {
  frame_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LaserScan::frame() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.frame)
  return frame_.GetNoArena();
}
inline void LaserScan::set_frame(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.frame)
}
inline void LaserScan::set_frame(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.LaserScan.frame)
}
inline void LaserScan::set_frame(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.LaserScan.frame)
}
inline void LaserScan::set_frame(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  frame_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.LaserScan.frame)
}
inline std::string* LaserScan::mutable_frame() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.LaserScan.frame)
  return frame_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LaserScan::release_frame() {
  // @@protoc_insertion_point(field_release:ignition.msgs.LaserScan.frame)
  if (!has_frame()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return frame_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LaserScan::set_allocated_frame(std::string* frame) {
  if (frame != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.LaserScan.frame)
}

// optional .ignition.msgs.Pose world_pose = 3;
inline bool LaserScan::has_world_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::ignition::msgs::Pose& LaserScan::world_pose() const {
  const ::ignition::msgs::Pose* p = world_pose_;
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.world_pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Pose*>(
      &::ignition::msgs::_Pose_default_instance_);
}
inline ::ignition::msgs::Pose* LaserScan::release_world_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.LaserScan.world_pose)
  _has_bits_[0] &= ~0x00000004u;
  ::ignition::msgs::Pose* temp = world_pose_;
  world_pose_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Pose* LaserScan::mutable_world_pose() {
  _has_bits_[0] |= 0x00000004u;
  if (world_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Pose>(GetArenaNoVirtual());
    world_pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.LaserScan.world_pose)
  return world_pose_;
}
inline void LaserScan::set_allocated_world_pose(::ignition::msgs::Pose* world_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_pose_);
  }
  if (world_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  world_pose_ = world_pose;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.LaserScan.world_pose)
}

// optional double angle_min = 4;
inline bool LaserScan::has_angle_min() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LaserScan::clear_angle_min() {
  angle_min_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double LaserScan::angle_min() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.angle_min)
  return angle_min_;
}
inline void LaserScan::set_angle_min(double value) {
  _has_bits_[0] |= 0x00000008u;
  angle_min_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.angle_min)
}

// optional double angle_max = 5;
inline bool LaserScan::has_angle_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LaserScan::clear_angle_max() {
  angle_max_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double LaserScan::angle_max() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.angle_max)
  return angle_max_;
}
inline void LaserScan::set_angle_max(double value) {
  _has_bits_[0] |= 0x00000010u;
  angle_max_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.angle_max)
}

// optional double angle_step = 6;
inline bool LaserScan::has_angle_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LaserScan::clear_angle_step() {
  angle_step_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double LaserScan::angle_step() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.angle_step)
  return angle_step_;
}
inline void LaserScan::set_angle_step(double value) {
  _has_bits_[0] |= 0x00000020u;
  angle_step_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.angle_step)
}

// optional double range_min = 7;
inline bool LaserScan::has_range_min() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LaserScan::clear_range_min() {
  range_min_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double LaserScan::range_min() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.range_min)
  return range_min_;
}
inline void LaserScan::set_range_min(double value) {
  _has_bits_[0] |= 0x00000040u;
  range_min_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.range_min)
}

// optional double range_max = 8;
inline bool LaserScan::has_range_max() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LaserScan::clear_range_max() {
  range_max_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double LaserScan::range_max() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.range_max)
  return range_max_;
}
inline void LaserScan::set_range_max(double value) {
  _has_bits_[0] |= 0x00000080u;
  range_max_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.range_max)
}

// optional uint32 count = 9;
inline bool LaserScan::has_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LaserScan::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaserScan::count() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.count)
  return count_;
}
inline void LaserScan::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  count_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.count)
}

// optional double vertical_angle_min = 10;
inline bool LaserScan::has_vertical_angle_min() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LaserScan::clear_vertical_angle_min() {
  vertical_angle_min_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double LaserScan::vertical_angle_min() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.vertical_angle_min)
  return vertical_angle_min_;
}
inline void LaserScan::set_vertical_angle_min(double value) {
  _has_bits_[0] |= 0x00000100u;
  vertical_angle_min_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.vertical_angle_min)
}

// optional double vertical_angle_max = 11;
inline bool LaserScan::has_vertical_angle_max() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LaserScan::clear_vertical_angle_max() {
  vertical_angle_max_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double LaserScan::vertical_angle_max() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.vertical_angle_max)
  return vertical_angle_max_;
}
inline void LaserScan::set_vertical_angle_max(double value) {
  _has_bits_[0] |= 0x00000200u;
  vertical_angle_max_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.vertical_angle_max)
}

// optional double vertical_angle_step = 12;
inline bool LaserScan::has_vertical_angle_step() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LaserScan::clear_vertical_angle_step() {
  vertical_angle_step_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double LaserScan::vertical_angle_step() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.vertical_angle_step)
  return vertical_angle_step_;
}
inline void LaserScan::set_vertical_angle_step(double value) {
  _has_bits_[0] |= 0x00001000u;
  vertical_angle_step_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.vertical_angle_step)
}

// optional uint32 vertical_count = 13;
inline bool LaserScan::has_vertical_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LaserScan::clear_vertical_count() {
  vertical_count_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LaserScan::vertical_count() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.vertical_count)
  return vertical_count_;
}
inline void LaserScan::set_vertical_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  vertical_count_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.vertical_count)
}

// repeated double ranges = 14;
inline int LaserScan::ranges_size() const {
  return ranges_.size();
}
inline void LaserScan::clear_ranges() {
  ranges_.Clear();
}
inline double LaserScan::ranges(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.ranges)
  return ranges_.Get(index);
}
inline void LaserScan::set_ranges(int index, double value) {
  ranges_.Set(index, value);
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.ranges)
}
inline void LaserScan::add_ranges(double value) {
  ranges_.Add(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.LaserScan.ranges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaserScan::ranges() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.LaserScan.ranges)
  return ranges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaserScan::mutable_ranges() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.LaserScan.ranges)
  return &ranges_;
}

// repeated double intensities = 15;
inline int LaserScan::intensities_size() const {
  return intensities_.size();
}
inline void LaserScan::clear_intensities() {
  intensities_.Clear();
}
inline double LaserScan::intensities(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.LaserScan.intensities)
  return intensities_.Get(index);
}
inline void LaserScan::set_intensities(int index, double value) {
  intensities_.Set(index, value);
  // @@protoc_insertion_point(field_set:ignition.msgs.LaserScan.intensities)
}
inline void LaserScan::add_intensities(double value) {
  intensities_.Add(value);
  // @@protoc_insertion_point(field_add:ignition.msgs.LaserScan.intensities)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
LaserScan::intensities() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.LaserScan.intensities)
  return intensities_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
LaserScan::mutable_intensities() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.LaserScan.intensities)
  return &intensities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<LaserScan> LaserScanUniquePtr;
typedef std::unique_ptr<const LaserScan> ConstLaserScanUniquePtr;
typedef std::shared_ptr<LaserScan> LaserScanSharedPtr;
typedef std::shared_ptr<const LaserScan> ConstLaserScanSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2flaserscan_2eproto
