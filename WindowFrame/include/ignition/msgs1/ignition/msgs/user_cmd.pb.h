// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/user_cmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fuser_5fcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fuser_5fcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/light.pb.h"
#include "ignition/msgs/model.pb.h"
#include "ignition/msgs/world_control.pb.h"
#include "ignition/msgs/wrench.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fuser_5fcmd_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fuser_5fcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fuser_5fcmd_2eproto;
namespace ignition {
namespace msgs {
class UserCmd;
class UserCmdDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern UserCmdDefaultTypeInternal _UserCmd_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::UserCmd* Arena::CreateMaybeMessage<::ignition::msgs::UserCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

enum UserCmd_Type : int {
  UserCmd_Type_MOVING = 1,
  UserCmd_Type_WORLD_CONTROL = 2,
  UserCmd_Type_WRENCH = 3,
  UserCmd_Type_SCALING = 4
};
IGNITION_MSGS_VISIBLE bool UserCmd_Type_IsValid(int value);
constexpr UserCmd_Type UserCmd_Type_Type_MIN = UserCmd_Type_MOVING;
constexpr UserCmd_Type UserCmd_Type_Type_MAX = UserCmd_Type_SCALING;
constexpr int UserCmd_Type_Type_ARRAYSIZE = UserCmd_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UserCmd_Type_descriptor();
template<typename T>
inline const std::string& UserCmd_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UserCmd_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UserCmd_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UserCmd_Type_descriptor(), enum_t_value);
}
inline bool UserCmd_Type_Parse(
    const std::string& name, UserCmd_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UserCmd_Type>(
    UserCmd_Type_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE UserCmd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.UserCmd) */ {
 public:
  UserCmd();
  virtual ~UserCmd();

  UserCmd(const UserCmd& from);
  UserCmd(UserCmd&& from) noexcept
    : UserCmd() {
    *this = ::std::move(from);
  }

  inline UserCmd& operator=(const UserCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserCmd& operator=(UserCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserCmd* internal_default_instance() {
    return reinterpret_cast<const UserCmd*>(
               &_UserCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserCmd& a, UserCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(UserCmd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserCmd* New() const final {
    return CreateMaybeMessage<UserCmd>(nullptr);
  }

  UserCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserCmd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserCmd& from);
  void MergeFrom(const UserCmd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserCmd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.UserCmd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fuser_5fcmd_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fuser_5fcmd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UserCmd_Type Type;
  static constexpr Type MOVING =
    UserCmd_Type_MOVING;
  static constexpr Type WORLD_CONTROL =
    UserCmd_Type_WORLD_CONTROL;
  static constexpr Type WRENCH =
    UserCmd_Type_WRENCH;
  static constexpr Type SCALING =
    UserCmd_Type_SCALING;
  static inline bool Type_IsValid(int value) {
    return UserCmd_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    UserCmd_Type_Type_MIN;
  static constexpr Type Type_MAX =
    UserCmd_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    UserCmd_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return UserCmd_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return UserCmd_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return UserCmd_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModelFieldNumber = 5,
    kLightFieldNumber = 6,
    kDescriptionFieldNumber = 3,
    kEntityNameFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kWorldControlFieldNumber = 8,
    kWrenchFieldNumber = 9,
    kIdFieldNumber = 2,
    kTypeFieldNumber = 4,
  };
  // repeated .ignition.msgs.Model model = 5;
  int model_size() const;
  void clear_model();
  ::ignition::msgs::Model* mutable_model(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Model >*
      mutable_model();
  const ::ignition::msgs::Model& model(int index) const;
  ::ignition::msgs::Model* add_model();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Model >&
      model() const;

  // repeated .ignition.msgs.Light light = 6;
  int light_size() const;
  void clear_light();
  ::ignition::msgs::Light* mutable_light(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Light >*
      mutable_light();
  const ::ignition::msgs::Light& light(int index) const;
  ::ignition::msgs::Light* add_light();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Light >&
      light() const;

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // optional string entity_name = 7;
  bool has_entity_name() const;
  void clear_entity_name();
  const std::string& entity_name() const;
  void set_entity_name(const std::string& value);
  void set_entity_name(std::string&& value);
  void set_entity_name(const char* value);
  void set_entity_name(const char* value, size_t size);
  std::string* mutable_entity_name();
  std::string* release_entity_name();
  void set_allocated_entity_name(std::string* entity_name);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.WorldControl world_control = 8;
  bool has_world_control() const;
  void clear_world_control();
  const ::ignition::msgs::WorldControl& world_control() const;
  ::ignition::msgs::WorldControl* release_world_control();
  ::ignition::msgs::WorldControl* mutable_world_control();
  void set_allocated_world_control(::ignition::msgs::WorldControl* world_control);

  // optional .ignition.msgs.Wrench wrench = 9;
  bool has_wrench() const;
  void clear_wrench();
  const ::ignition::msgs::Wrench& wrench() const;
  ::ignition::msgs::Wrench* release_wrench();
  ::ignition::msgs::Wrench* mutable_wrench();
  void set_allocated_wrench(::ignition::msgs::Wrench* wrench);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .ignition.msgs.UserCmd.Type type = 4;
  bool has_type() const;
  void clear_type();
  ::ignition::msgs::UserCmd_Type type() const;
  void set_type(::ignition::msgs::UserCmd_Type value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.UserCmd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Model > model_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Light > light_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_name_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::WorldControl* world_control_;
  ::ignition::msgs::Wrench* wrench_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int type_;
  friend struct ::TableStruct_ignition_2fmsgs_2fuser_5fcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserCmd

// optional .ignition.msgs.Header header = 1;
inline bool UserCmd::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::ignition::msgs::Header& UserCmd::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* UserCmd::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.header)
  _has_bits_[0] &= ~0x00000004u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* UserCmd::mutable_header() {
  _has_bits_[0] |= 0x00000004u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.header)
  return header_;
}
inline void UserCmd::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.header)
}

// optional uint32 id = 2;
inline bool UserCmd::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserCmd::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UserCmd::id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.id)
  return id_;
}
inline void UserCmd::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.UserCmd.id)
}

// optional string description = 3;
inline bool UserCmd::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserCmd::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserCmd::description() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.description)
  return description_.GetNoArena();
}
inline void UserCmd::set_description(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.UserCmd.description)
}
inline void UserCmd::set_description(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.UserCmd.description)
}
inline void UserCmd::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.UserCmd.description)
}
inline void UserCmd::set_description(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.UserCmd.description)
}
inline std::string* UserCmd::mutable_description() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserCmd::release_description() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.description)
  if (!has_description()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return description_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserCmd::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.description)
}

// optional .ignition.msgs.UserCmd.Type type = 4;
inline bool UserCmd::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserCmd::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::ignition::msgs::UserCmd_Type UserCmd::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.type)
  return static_cast< ::ignition::msgs::UserCmd_Type >(type_);
}
inline void UserCmd::set_type(::ignition::msgs::UserCmd_Type value) {
  assert(::ignition::msgs::UserCmd_Type_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.UserCmd.type)
}

// repeated .ignition.msgs.Model model = 5;
inline int UserCmd::model_size() const {
  return model_.size();
}
inline ::ignition::msgs::Model* UserCmd::mutable_model(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.model)
  return model_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Model >*
UserCmd::mutable_model() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.UserCmd.model)
  return &model_;
}
inline const ::ignition::msgs::Model& UserCmd::model(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.model)
  return model_.Get(index);
}
inline ::ignition::msgs::Model* UserCmd::add_model() {
  // @@protoc_insertion_point(field_add:ignition.msgs.UserCmd.model)
  return model_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Model >&
UserCmd::model() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.UserCmd.model)
  return model_;
}

// repeated .ignition.msgs.Light light = 6;
inline int UserCmd::light_size() const {
  return light_.size();
}
inline ::ignition::msgs::Light* UserCmd::mutable_light(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.light)
  return light_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Light >*
UserCmd::mutable_light() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.UserCmd.light)
  return &light_;
}
inline const ::ignition::msgs::Light& UserCmd::light(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.light)
  return light_.Get(index);
}
inline ::ignition::msgs::Light* UserCmd::add_light() {
  // @@protoc_insertion_point(field_add:ignition.msgs.UserCmd.light)
  return light_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Light >&
UserCmd::light() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.UserCmd.light)
  return light_;
}

// optional string entity_name = 7;
inline bool UserCmd::has_entity_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserCmd::clear_entity_name() {
  entity_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserCmd::entity_name() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.entity_name)
  return entity_name_.GetNoArena();
}
inline void UserCmd::set_entity_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  entity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.UserCmd.entity_name)
}
inline void UserCmd::set_entity_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  entity_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.UserCmd.entity_name)
}
inline void UserCmd::set_entity_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  entity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.UserCmd.entity_name)
}
inline void UserCmd::set_entity_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  entity_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.UserCmd.entity_name)
}
inline std::string* UserCmd::mutable_entity_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.entity_name)
  return entity_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UserCmd::release_entity_name() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.entity_name)
  if (!has_entity_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return entity_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UserCmd::set_allocated_entity_name(std::string* entity_name) {
  if (entity_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  entity_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_name);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.entity_name)
}

// optional .ignition.msgs.WorldControl world_control = 8;
inline bool UserCmd::has_world_control() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::ignition::msgs::WorldControl& UserCmd::world_control() const {
  const ::ignition::msgs::WorldControl* p = world_control_;
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.world_control)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::WorldControl*>(
      &::ignition::msgs::_WorldControl_default_instance_);
}
inline ::ignition::msgs::WorldControl* UserCmd::release_world_control() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.world_control)
  _has_bits_[0] &= ~0x00000008u;
  ::ignition::msgs::WorldControl* temp = world_control_;
  world_control_ = nullptr;
  return temp;
}
inline ::ignition::msgs::WorldControl* UserCmd::mutable_world_control() {
  _has_bits_[0] |= 0x00000008u;
  if (world_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::WorldControl>(GetArenaNoVirtual());
    world_control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.world_control)
  return world_control_;
}
inline void UserCmd::set_allocated_world_control(::ignition::msgs::WorldControl* world_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_control_);
  }
  if (world_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_control, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  world_control_ = world_control;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.world_control)
}

// optional .ignition.msgs.Wrench wrench = 9;
inline bool UserCmd::has_wrench() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::ignition::msgs::Wrench& UserCmd::wrench() const {
  const ::ignition::msgs::Wrench* p = wrench_;
  // @@protoc_insertion_point(field_get:ignition.msgs.UserCmd.wrench)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Wrench*>(
      &::ignition::msgs::_Wrench_default_instance_);
}
inline ::ignition::msgs::Wrench* UserCmd::release_wrench() {
  // @@protoc_insertion_point(field_release:ignition.msgs.UserCmd.wrench)
  _has_bits_[0] &= ~0x00000010u;
  ::ignition::msgs::Wrench* temp = wrench_;
  wrench_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Wrench* UserCmd::mutable_wrench() {
  _has_bits_[0] |= 0x00000010u;
  if (wrench_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Wrench>(GetArenaNoVirtual());
    wrench_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.UserCmd.wrench)
  return wrench_;
}
inline void UserCmd::set_allocated_wrench(::ignition::msgs::Wrench* wrench) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wrench_);
  }
  if (wrench) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wrench = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wrench, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  wrench_ = wrench;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.UserCmd.wrench)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<UserCmd> UserCmdUniquePtr;
typedef std::unique_ptr<const UserCmd> ConstUserCmdUniquePtr;
typedef std::shared_ptr<UserCmd> UserCmdSharedPtr;
typedef std::shared_ptr<const UserCmd> ConstUserCmdSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ignition::msgs::UserCmd_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::UserCmd_Type>() {
  return ::ignition::msgs::UserCmd_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fuser_5fcmd_2eproto
