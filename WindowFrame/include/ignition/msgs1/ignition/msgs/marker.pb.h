// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/marker.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fmarker_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fmarker_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/time.pb.h"
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/vector3d.pb.h"
#include "ignition/msgs/material.pb.h"
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fmarker_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fmarker_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fmarker_2eproto;
namespace ignition {
namespace msgs {
class Marker;
class MarkerDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern MarkerDefaultTypeInternal _Marker_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::Marker* Arena::CreateMaybeMessage<::ignition::msgs::Marker>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

enum Marker_Type : int {
  Marker_Type_NONE = 0,
  Marker_Type_BOX = 1,
  Marker_Type_CYLINDER = 2,
  Marker_Type_LINE_LIST = 4,
  Marker_Type_LINE_STRIP = 3,
  Marker_Type_POINTS = 5,
  Marker_Type_SPHERE = 6,
  Marker_Type_TEXT = 7,
  Marker_Type_TRIANGLE_FAN = 8,
  Marker_Type_TRIANGLE_LIST = 9,
  Marker_Type_TRIANGLE_STRIP = 10
};
IGNITION_MSGS_VISIBLE bool Marker_Type_IsValid(int value);
constexpr Marker_Type Marker_Type_Type_MIN = Marker_Type_NONE;
constexpr Marker_Type Marker_Type_Type_MAX = Marker_Type_TRIANGLE_STRIP;
constexpr int Marker_Type_Type_ARRAYSIZE = Marker_Type_Type_MAX + 1;

IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Marker_Type_descriptor();
template<typename T>
inline const std::string& Marker_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Marker_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Marker_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Marker_Type_descriptor(), enum_t_value);
}
inline bool Marker_Type_Parse(
    const std::string& name, Marker_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Marker_Type>(
    Marker_Type_descriptor(), name, value);
}
enum Marker_Visibility : int {
  Marker_Visibility_GUI = 0,
  Marker_Visibility_ALL = 1
};
IGNITION_MSGS_VISIBLE bool Marker_Visibility_IsValid(int value);
constexpr Marker_Visibility Marker_Visibility_Visibility_MIN = Marker_Visibility_GUI;
constexpr Marker_Visibility Marker_Visibility_Visibility_MAX = Marker_Visibility_ALL;
constexpr int Marker_Visibility_Visibility_ARRAYSIZE = Marker_Visibility_Visibility_MAX + 1;

IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Marker_Visibility_descriptor();
template<typename T>
inline const std::string& Marker_Visibility_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Marker_Visibility>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Marker_Visibility_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Marker_Visibility_descriptor(), enum_t_value);
}
inline bool Marker_Visibility_Parse(
    const std::string& name, Marker_Visibility* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Marker_Visibility>(
    Marker_Visibility_descriptor(), name, value);
}
enum Marker_Action : int {
  Marker_Action_ADD_MODIFY = 0,
  Marker_Action_DELETE_MARKER = 1,
  Marker_Action_DELETE_ALL = 2
};
IGNITION_MSGS_VISIBLE bool Marker_Action_IsValid(int value);
constexpr Marker_Action Marker_Action_Action_MIN = Marker_Action_ADD_MODIFY;
constexpr Marker_Action Marker_Action_Action_MAX = Marker_Action_DELETE_ALL;
constexpr int Marker_Action_Action_ARRAYSIZE = Marker_Action_Action_MAX + 1;

IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Marker_Action_descriptor();
template<typename T>
inline const std::string& Marker_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Marker_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Marker_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Marker_Action_descriptor(), enum_t_value);
}
inline bool Marker_Action_Parse(
    const std::string& name, Marker_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Marker_Action>(
    Marker_Action_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Marker :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Marker) */ {
 public:
  Marker();
  virtual ~Marker();

  Marker(const Marker& from);
  Marker(Marker&& from) noexcept
    : Marker() {
    *this = ::std::move(from);
  }

  inline Marker& operator=(const Marker& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker& operator=(Marker&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Marker& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Marker* internal_default_instance() {
    return reinterpret_cast<const Marker*>(
               &_Marker_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Marker& a, Marker& b) {
    a.Swap(&b);
  }
  inline void Swap(Marker* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Marker* New() const final {
    return CreateMaybeMessage<Marker>(nullptr);
  }

  Marker* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Marker>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Marker& from);
  void MergeFrom(const Marker& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.Marker";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fmarker_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fmarker_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Marker_Type Type;
  static constexpr Type NONE =
    Marker_Type_NONE;
  static constexpr Type BOX =
    Marker_Type_BOX;
  static constexpr Type CYLINDER =
    Marker_Type_CYLINDER;
  static constexpr Type LINE_LIST =
    Marker_Type_LINE_LIST;
  static constexpr Type LINE_STRIP =
    Marker_Type_LINE_STRIP;
  static constexpr Type POINTS =
    Marker_Type_POINTS;
  static constexpr Type SPHERE =
    Marker_Type_SPHERE;
  static constexpr Type TEXT =
    Marker_Type_TEXT;
  static constexpr Type TRIANGLE_FAN =
    Marker_Type_TRIANGLE_FAN;
  static constexpr Type TRIANGLE_LIST =
    Marker_Type_TRIANGLE_LIST;
  static constexpr Type TRIANGLE_STRIP =
    Marker_Type_TRIANGLE_STRIP;
  static inline bool Type_IsValid(int value) {
    return Marker_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Marker_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Marker_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Marker_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Marker_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Marker_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Marker_Type_Parse(name, value);
  }

  typedef Marker_Visibility Visibility;
  static constexpr Visibility GUI =
    Marker_Visibility_GUI;
  static constexpr Visibility ALL =
    Marker_Visibility_ALL;
  static inline bool Visibility_IsValid(int value) {
    return Marker_Visibility_IsValid(value);
  }
  static constexpr Visibility Visibility_MIN =
    Marker_Visibility_Visibility_MIN;
  static constexpr Visibility Visibility_MAX =
    Marker_Visibility_Visibility_MAX;
  static constexpr int Visibility_ARRAYSIZE =
    Marker_Visibility_Visibility_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Visibility_descriptor() {
    return Marker_Visibility_descriptor();
  }
  template<typename T>
  static inline const std::string& Visibility_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Visibility>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Visibility_Name.");
    return Marker_Visibility_Name(enum_t_value);
  }
  static inline bool Visibility_Parse(const std::string& name,
      Visibility* value) {
    return Marker_Visibility_Parse(name, value);
  }

  typedef Marker_Action Action;
  static constexpr Action ADD_MODIFY =
    Marker_Action_ADD_MODIFY;
  static constexpr Action DELETE_MARKER =
    Marker_Action_DELETE_MARKER;
  static constexpr Action DELETE_ALL =
    Marker_Action_DELETE_ALL;
  static inline bool Action_IsValid(int value) {
    return Marker_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    Marker_Action_Action_MIN;
  static constexpr Action Action_MAX =
    Marker_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    Marker_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return Marker_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return Marker_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return Marker_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 11,
    kNsFieldNumber = 3,
    kTextFieldNumber = 12,
    kParentFieldNumber = 13,
    kHeaderFieldNumber = 1,
    kLifetimeFieldNumber = 7,
    kPoseFieldNumber = 8,
    kScaleFieldNumber = 9,
    kMaterialFieldNumber = 10,
    kActionFieldNumber = 2,
    kLayerFieldNumber = 5,
    kIdFieldNumber = 4,
    kTypeFieldNumber = 6,
    kVisibilityFieldNumber = 14,
  };
  // repeated .ignition.msgs.Vector3d point = 11;
  int point_size() const;
  void clear_point();
  ::ignition::msgs::Vector3d* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Vector3d >*
      mutable_point();
  const ::ignition::msgs::Vector3d& point(int index) const;
  ::ignition::msgs::Vector3d* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Vector3d >&
      point() const;

  // optional string ns = 3;
  bool has_ns() const;
  void clear_ns();
  const std::string& ns() const;
  void set_ns(const std::string& value);
  void set_ns(std::string&& value);
  void set_ns(const char* value);
  void set_ns(const char* value, size_t size);
  std::string* mutable_ns();
  std::string* release_ns();
  void set_allocated_ns(std::string* ns);

  // optional string text = 12;
  bool has_text() const;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // optional string parent = 13;
  bool has_parent() const;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Time lifetime = 7;
  bool has_lifetime() const;
  void clear_lifetime();
  const ::ignition::msgs::Time& lifetime() const;
  ::ignition::msgs::Time* release_lifetime();
  ::ignition::msgs::Time* mutable_lifetime();
  void set_allocated_lifetime(::ignition::msgs::Time* lifetime);

  // optional .ignition.msgs.Pose pose = 8;
  bool has_pose() const;
  void clear_pose();
  const ::ignition::msgs::Pose& pose() const;
  ::ignition::msgs::Pose* release_pose();
  ::ignition::msgs::Pose* mutable_pose();
  void set_allocated_pose(::ignition::msgs::Pose* pose);

  // optional .ignition.msgs.Vector3d scale = 9;
  bool has_scale() const;
  void clear_scale();
  const ::ignition::msgs::Vector3d& scale() const;
  ::ignition::msgs::Vector3d* release_scale();
  ::ignition::msgs::Vector3d* mutable_scale();
  void set_allocated_scale(::ignition::msgs::Vector3d* scale);

  // optional .ignition.msgs.Material material = 10;
  bool has_material() const;
  void clear_material();
  const ::ignition::msgs::Material& material() const;
  ::ignition::msgs::Material* release_material();
  ::ignition::msgs::Material* mutable_material();
  void set_allocated_material(::ignition::msgs::Material* material);

  // optional .ignition.msgs.Marker.Action action = 2;
  bool has_action() const;
  void clear_action();
  ::ignition::msgs::Marker_Action action() const;
  void set_action(::ignition::msgs::Marker_Action value);

  // optional int32 layer = 5 [default = 0];
  bool has_layer() const;
  void clear_layer();
  ::PROTOBUF_NAMESPACE_ID::int32 layer() const;
  void set_layer(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional uint64 id = 4;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional .ignition.msgs.Marker.Type type = 6;
  bool has_type() const;
  void clear_type();
  ::ignition::msgs::Marker_Type type() const;
  void set_type(::ignition::msgs::Marker_Type value);

  // optional .ignition.msgs.Marker.Visibility visibility = 14;
  bool has_visibility() const;
  void clear_visibility();
  ::ignition::msgs::Marker_Visibility visibility() const;
  void set_visibility(::ignition::msgs::Marker_Visibility value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Marker)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Vector3d > point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Time* lifetime_;
  ::ignition::msgs::Pose* pose_;
  ::ignition::msgs::Vector3d* scale_;
  ::ignition::msgs::Material* material_;
  int action_;
  ::PROTOBUF_NAMESPACE_ID::int32 layer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int type_;
  int visibility_;
  friend struct ::TableStruct_ignition_2fmsgs_2fmarker_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Marker

// optional .ignition.msgs.Header header = 1;
inline bool Marker::has_header() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::ignition::msgs::Header& Marker::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* Marker::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.header)
  _has_bits_[0] &= ~0x00000008u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* Marker::mutable_header() {
  _has_bits_[0] |= 0x00000008u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.header)
  return header_;
}
inline void Marker::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.header)
}

// optional .ignition.msgs.Marker.Action action = 2;
inline bool Marker::has_action() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Marker::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::ignition::msgs::Marker_Action Marker::action() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.action)
  return static_cast< ::ignition::msgs::Marker_Action >(action_);
}
inline void Marker::set_action(::ignition::msgs::Marker_Action value) {
  assert(::ignition::msgs::Marker_Action_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  action_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.action)
}

// optional string ns = 3;
inline bool Marker::has_ns() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Marker::clear_ns() {
  ns_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Marker::ns() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.ns)
  return ns_.GetNoArena();
}
inline void Marker::set_ns(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.ns)
}
inline void Marker::set_ns(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ns_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Marker.ns)
}
inline void Marker::set_ns(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Marker.ns)
}
inline void Marker::set_ns(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ns_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Marker.ns)
}
inline std::string* Marker::mutable_ns() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.ns)
  return ns_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Marker::release_ns() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.ns)
  if (!has_ns()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ns_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_allocated_ns(std::string* ns) {
  if (ns != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ns_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.ns)
}

// optional uint64 id = 4;
inline bool Marker::has_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Marker::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Marker::id() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.id)
  return id_;
}
inline void Marker::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  id_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.id)
}

// optional int32 layer = 5 [default = 0];
inline bool Marker::has_layer() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Marker::clear_layer() {
  layer_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker::layer() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.layer)
  return layer_;
}
inline void Marker::set_layer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  layer_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.layer)
}

// optional .ignition.msgs.Marker.Type type = 6;
inline bool Marker::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Marker::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::ignition::msgs::Marker_Type Marker::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.type)
  return static_cast< ::ignition::msgs::Marker_Type >(type_);
}
inline void Marker::set_type(::ignition::msgs::Marker_Type value) {
  assert(::ignition::msgs::Marker_Type_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.type)
}

// optional .ignition.msgs.Time lifetime = 7;
inline bool Marker::has_lifetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::ignition::msgs::Time& Marker::lifetime() const {
  const ::ignition::msgs::Time* p = lifetime_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.lifetime)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Time*>(
      &::ignition::msgs::_Time_default_instance_);
}
inline ::ignition::msgs::Time* Marker::release_lifetime() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.lifetime)
  _has_bits_[0] &= ~0x00000010u;
  ::ignition::msgs::Time* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Time* Marker::mutable_lifetime() {
  _has_bits_[0] |= 0x00000010u;
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Time>(GetArenaNoVirtual());
    lifetime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.lifetime)
  return lifetime_;
}
inline void Marker::set_allocated_lifetime(::ignition::msgs::Time* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.lifetime)
}

// optional .ignition.msgs.Pose pose = 8;
inline bool Marker::has_pose() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::ignition::msgs::Pose& Marker::pose() const {
  const ::ignition::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Pose*>(
      &::ignition::msgs::_Pose_default_instance_);
}
inline ::ignition::msgs::Pose* Marker::release_pose() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.pose)
  _has_bits_[0] &= ~0x00000020u;
  ::ignition::msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Pose* Marker::mutable_pose() {
  _has_bits_[0] |= 0x00000020u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.pose)
  return pose_;
}
inline void Marker::set_allocated_pose(::ignition::msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.pose)
}

// optional .ignition.msgs.Vector3d scale = 9;
inline bool Marker::has_scale() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::ignition::msgs::Vector3d& Marker::scale() const {
  const ::ignition::msgs::Vector3d* p = scale_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.scale)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Vector3d*>(
      &::ignition::msgs::_Vector3d_default_instance_);
}
inline ::ignition::msgs::Vector3d* Marker::release_scale() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.scale)
  _has_bits_[0] &= ~0x00000040u;
  ::ignition::msgs::Vector3d* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Vector3d* Marker::mutable_scale() {
  _has_bits_[0] |= 0x00000040u;
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Vector3d>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.scale)
  return scale_;
}
inline void Marker::set_allocated_scale(::ignition::msgs::Vector3d* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.scale)
}

// optional .ignition.msgs.Material material = 10;
inline bool Marker::has_material() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline const ::ignition::msgs::Material& Marker::material() const {
  const ::ignition::msgs::Material* p = material_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.material)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Material*>(
      &::ignition::msgs::_Material_default_instance_);
}
inline ::ignition::msgs::Material* Marker::release_material() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.material)
  _has_bits_[0] &= ~0x00000080u;
  ::ignition::msgs::Material* temp = material_;
  material_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Material* Marker::mutable_material() {
  _has_bits_[0] |= 0x00000080u;
  if (material_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Material>(GetArenaNoVirtual());
    material_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.material)
  return material_;
}
inline void Marker::set_allocated_material(::ignition::msgs::Material* material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(material_);
  }
  if (material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  material_ = material;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.material)
}

// repeated .ignition.msgs.Vector3d point = 11;
inline int Marker::point_size() const {
  return point_.size();
}
inline ::ignition::msgs::Vector3d* Marker::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Vector3d >*
Marker::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:ignition.msgs.Marker.point)
  return &point_;
}
inline const ::ignition::msgs::Vector3d& Marker::point(int index) const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.point)
  return point_.Get(index);
}
inline ::ignition::msgs::Vector3d* Marker::add_point() {
  // @@protoc_insertion_point(field_add:ignition.msgs.Marker.point)
  return point_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ignition::msgs::Vector3d >&
Marker::point() const {
  // @@protoc_insertion_point(field_list:ignition.msgs.Marker.point)
  return point_;
}

// optional string text = 12;
inline bool Marker::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Marker::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Marker::text() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.text)
  return text_.GetNoArena();
}
inline void Marker::set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.text)
}
inline void Marker::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Marker.text)
}
inline void Marker::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Marker.text)
}
inline void Marker::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Marker.text)
}
inline std::string* Marker::mutable_text() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.text)
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Marker::release_text() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.text)
}

// optional string parent = 13;
inline bool Marker::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Marker::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Marker::parent() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.parent)
  return parent_.GetNoArena();
}
inline void Marker::set_parent(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.parent)
}
inline void Marker::set_parent(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Marker.parent)
}
inline void Marker::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Marker.parent)
}
inline void Marker::set_parent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Marker.parent)
}
inline std::string* Marker::mutable_parent() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Marker.parent)
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Marker::release_parent() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Marker.parent)
  if (!has_parent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return parent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Marker::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Marker.parent)
}

// optional .ignition.msgs.Marker.Visibility visibility = 14;
inline bool Marker::has_visibility() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Marker::clear_visibility() {
  visibility_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::ignition::msgs::Marker_Visibility Marker::visibility() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Marker.visibility)
  return static_cast< ::ignition::msgs::Marker_Visibility >(visibility_);
}
inline void Marker::set_visibility(::ignition::msgs::Marker_Visibility value) {
  assert(::ignition::msgs::Marker_Visibility_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  visibility_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Marker.visibility)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<Marker> MarkerUniquePtr;
typedef std::unique_ptr<const Marker> ConstMarkerUniquePtr;
typedef std::shared_ptr<Marker> MarkerSharedPtr;
typedef std::shared_ptr<const Marker> ConstMarkerSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ignition::msgs::Marker_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Marker_Type>() {
  return ::ignition::msgs::Marker_Type_descriptor();
}
template <> struct is_proto_enum< ::ignition::msgs::Marker_Visibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Marker_Visibility>() {
  return ::ignition::msgs::Marker_Visibility_descriptor();
}
template <> struct is_proto_enum< ::ignition::msgs::Marker_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Marker_Action>() {
  return ::ignition::msgs::Marker_Action_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fmarker_2eproto
