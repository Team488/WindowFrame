// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/camera_lens.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fcamera_5flens_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fcamera_5flens_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fcamera_5flens_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fcamera_5flens_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fcamera_5flens_2eproto;
namespace ignition {
namespace msgs {
class CameraLens;
class CameraLensDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern CameraLensDefaultTypeInternal _CameraLens_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::CameraLens* Arena::CreateMaybeMessage<::ignition::msgs::CameraLens>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

// ===================================================================

class IGNITION_MSGS_VISIBLE CameraLens :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.CameraLens) */ {
 public:
  CameraLens();
  virtual ~CameraLens();

  CameraLens(const CameraLens& from);
  CameraLens(CameraLens&& from) noexcept
    : CameraLens() {
    *this = ::std::move(from);
  }

  inline CameraLens& operator=(const CameraLens& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraLens& operator=(CameraLens&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraLens& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraLens* internal_default_instance() {
    return reinterpret_cast<const CameraLens*>(
               &_CameraLens_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraLens& a, CameraLens& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraLens* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraLens* New() const final {
    return CreateMaybeMessage<CameraLens>(nullptr);
  }

  CameraLens* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraLens>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraLens& from);
  void MergeFrom(const CameraLens& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraLens* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.CameraLens";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fcamera_5flens_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fcamera_5flens_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kFunFieldNumber = 7,
    kHeaderFieldNumber = 1,
    kC1FieldNumber = 3,
    kC2FieldNumber = 4,
    kC3FieldNumber = 5,
    kFFieldNumber = 6,
    kCutoffAngleFieldNumber = 9,
    kScaleToHfovFieldNumber = 8,
    kEnvTextureSizeFieldNumber = 11,
    kHfovFieldNumber = 10,
  };
  // optional string type = 2 [default = "gnomoical"];
  bool has_type() const;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // optional string fun = 7;
  bool has_fun() const;
  void clear_fun();
  const std::string& fun() const;
  void set_fun(const std::string& value);
  void set_fun(std::string&& value);
  void set_fun(const char* value);
  void set_fun(const char* value, size_t size);
  std::string* mutable_fun();
  std::string* release_fun();
  void set_allocated_fun(std::string* fun);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional double c1 = 3;
  bool has_c1() const;
  void clear_c1();
  double c1() const;
  void set_c1(double value);

  // optional double c2 = 4;
  bool has_c2() const;
  void clear_c2();
  double c2() const;
  void set_c2(double value);

  // optional double c3 = 5;
  bool has_c3() const;
  void clear_c3();
  double c3() const;
  void set_c3(double value);

  // optional double f = 6;
  bool has_f() const;
  void clear_f();
  double f() const;
  void set_f(double value);

  // optional double cutoff_angle = 9;
  bool has_cutoff_angle() const;
  void clear_cutoff_angle();
  double cutoff_angle() const;
  void set_cutoff_angle(double value);

  // optional bool scale_to_hfov = 8;
  bool has_scale_to_hfov() const;
  void clear_scale_to_hfov();
  bool scale_to_hfov() const;
  void set_scale_to_hfov(bool value);

  // optional int32 env_texture_size = 11;
  bool has_env_texture_size() const;
  void clear_env_texture_size();
  ::PROTOBUF_NAMESPACE_ID::int32 env_texture_size() const;
  void set_env_texture_size(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional double hfov = 10;
  bool has_hfov() const;
  void clear_hfov();
  double hfov() const;
  void set_hfov(double value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.CameraLens)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  public:
  static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> _i_give_permission_to_break_this_code_default_type_;
  private:
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fun_;
  ::ignition::msgs::Header* header_;
  double c1_;
  double c2_;
  double c3_;
  double f_;
  double cutoff_angle_;
  bool scale_to_hfov_;
  ::PROTOBUF_NAMESPACE_ID::int32 env_texture_size_;
  double hfov_;
  friend struct ::TableStruct_ignition_2fmsgs_2fcamera_5flens_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraLens

// optional .ignition.msgs.Header header = 1;
inline bool CameraLens::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::ignition::msgs::Header& CameraLens::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* CameraLens::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.CameraLens.header)
  _has_bits_[0] &= ~0x00000004u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* CameraLens::mutable_header() {
  _has_bits_[0] |= 0x00000004u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.CameraLens.header)
  return header_;
}
inline void CameraLens::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.CameraLens.header)
}

// optional string type = 2 [default = "gnomoical"];
inline bool CameraLens::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraLens::clear_type() {
  type_.ClearToDefaultNoArena(&::ignition::msgs::CameraLens::_i_give_permission_to_break_this_code_default_type_.get());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraLens::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.type)
  return type_.GetNoArena();
}
inline void CameraLens::set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::ignition::msgs::CameraLens::_i_give_permission_to_break_this_code_default_type_.get(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.type)
}
inline void CameraLens::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(
    &::ignition::msgs::CameraLens::_i_give_permission_to_break_this_code_default_type_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.CameraLens.type)
}
inline void CameraLens::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::ignition::msgs::CameraLens::_i_give_permission_to_break_this_code_default_type_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.CameraLens.type)
}
inline void CameraLens::set_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.SetNoArena(&::ignition::msgs::CameraLens::_i_give_permission_to_break_this_code_default_type_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.CameraLens.type)
}
inline std::string* CameraLens::mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.CameraLens.type)
  return type_.MutableNoArena(&::ignition::msgs::CameraLens::_i_give_permission_to_break_this_code_default_type_.get());
}
inline std::string* CameraLens::release_type() {
  // @@protoc_insertion_point(field_release:ignition.msgs.CameraLens.type)
  if (!has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefaultNoArena(&::ignition::msgs::CameraLens::_i_give_permission_to_break_this_code_default_type_.get());
}
inline void CameraLens::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocatedNoArena(&::ignition::msgs::CameraLens::_i_give_permission_to_break_this_code_default_type_.get(), type);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.CameraLens.type)
}

// optional double c1 = 3;
inline bool CameraLens::has_c1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraLens::clear_c1() {
  c1_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double CameraLens::c1() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.c1)
  return c1_;
}
inline void CameraLens::set_c1(double value) {
  _has_bits_[0] |= 0x00000008u;
  c1_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.c1)
}

// optional double c2 = 4;
inline bool CameraLens::has_c2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraLens::clear_c2() {
  c2_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double CameraLens::c2() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.c2)
  return c2_;
}
inline void CameraLens::set_c2(double value) {
  _has_bits_[0] |= 0x00000010u;
  c2_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.c2)
}

// optional double c3 = 5;
inline bool CameraLens::has_c3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraLens::clear_c3() {
  c3_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double CameraLens::c3() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.c3)
  return c3_;
}
inline void CameraLens::set_c3(double value) {
  _has_bits_[0] |= 0x00000020u;
  c3_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.c3)
}

// optional double f = 6;
inline bool CameraLens::has_f() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraLens::clear_f() {
  f_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double CameraLens::f() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.f)
  return f_;
}
inline void CameraLens::set_f(double value) {
  _has_bits_[0] |= 0x00000040u;
  f_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.f)
}

// optional string fun = 7;
inline bool CameraLens::has_fun() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraLens::clear_fun() {
  fun_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraLens::fun() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.fun)
  return fun_.GetNoArena();
}
inline void CameraLens::set_fun(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  fun_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.fun)
}
inline void CameraLens::set_fun(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  fun_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.CameraLens.fun)
}
inline void CameraLens::set_fun(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  fun_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.CameraLens.fun)
}
inline void CameraLens::set_fun(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  fun_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.CameraLens.fun)
}
inline std::string* CameraLens::mutable_fun() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.CameraLens.fun)
  return fun_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CameraLens::release_fun() {
  // @@protoc_insertion_point(field_release:ignition.msgs.CameraLens.fun)
  if (!has_fun()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return fun_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CameraLens::set_allocated_fun(std::string* fun) {
  if (fun != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  fun_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fun);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.CameraLens.fun)
}

// optional bool scale_to_hfov = 8;
inline bool CameraLens::has_scale_to_hfov() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraLens::clear_scale_to_hfov() {
  scale_to_hfov_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CameraLens::scale_to_hfov() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.scale_to_hfov)
  return scale_to_hfov_;
}
inline void CameraLens::set_scale_to_hfov(bool value) {
  _has_bits_[0] |= 0x00000100u;
  scale_to_hfov_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.scale_to_hfov)
}

// optional double cutoff_angle = 9;
inline bool CameraLens::has_cutoff_angle() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraLens::clear_cutoff_angle() {
  cutoff_angle_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double CameraLens::cutoff_angle() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.cutoff_angle)
  return cutoff_angle_;
}
inline void CameraLens::set_cutoff_angle(double value) {
  _has_bits_[0] |= 0x00000080u;
  cutoff_angle_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.cutoff_angle)
}

// optional double hfov = 10;
inline bool CameraLens::has_hfov() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraLens::clear_hfov() {
  hfov_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double CameraLens::hfov() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.hfov)
  return hfov_;
}
inline void CameraLens::set_hfov(double value) {
  _has_bits_[0] |= 0x00000400u;
  hfov_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.hfov)
}

// optional int32 env_texture_size = 11;
inline bool CameraLens::has_env_texture_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraLens::clear_env_texture_size() {
  env_texture_size_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CameraLens::env_texture_size() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.CameraLens.env_texture_size)
  return env_texture_size_;
}
inline void CameraLens::set_env_texture_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  env_texture_size_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.CameraLens.env_texture_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<CameraLens> CameraLensUniquePtr;
typedef std::unique_ptr<const CameraLens> ConstCameraLensUniquePtr;
typedef std::shared_ptr<CameraLens> CameraLensSharedPtr;
typedef std::shared_ptr<const CameraLens> ConstCameraLensSharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fcamera_5flens_2eproto
