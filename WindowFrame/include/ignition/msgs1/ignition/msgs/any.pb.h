// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ignition/msgs/any.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fany_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fany_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ignition/msgs/header.pb.h"
#include "ignition/msgs/color.pb.h"
#include "ignition/msgs/pose.pb.h"
#include "ignition/msgs/quaternion.pb.h"
#include "ignition/msgs/time.pb.h"
#include "ignition/msgs/vector3d.pb.h"
#ifndef _MSC_VER
#pragma GCC system_header
#else
#pragma warning(push)
#pragma warning(disable: 4244 4267 4100 4244 4512 4127 4068 4275 4251)
#endif
#include <memory>
#include <ignition/msgs/Export.hh>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ignition_2fmsgs_2fany_2eproto IGNITION_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct IGNITION_MSGS_VISIBLE TableStruct_ignition_2fmsgs_2fany_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ignition_2fmsgs_2fany_2eproto;
namespace ignition {
namespace msgs {
class Any;
class AnyDefaultTypeInternal;
IGNITION_MSGS_VISIBLE extern AnyDefaultTypeInternal _Any_default_instance_;
}  // namespace msgs
}  // namespace ignition
PROTOBUF_NAMESPACE_OPEN
template<> IGNITION_MSGS_VISIBLE ::ignition::msgs::Any* Arena::CreateMaybeMessage<::ignition::msgs::Any>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ignition {
namespace msgs {

enum Any_ValueType : int {
  Any_ValueType_NONE = 1,
  Any_ValueType_DOUBLE = 2,
  Any_ValueType_INT32 = 3,
  Any_ValueType_STRING = 4,
  Any_ValueType_BOOLEAN = 5,
  Any_ValueType_VECTOR3D = 6,
  Any_ValueType_COLOR = 7,
  Any_ValueType_POSE3D = 8,
  Any_ValueType_QUATERNIOND = 9,
  Any_ValueType_TIME = 10
};
IGNITION_MSGS_VISIBLE bool Any_ValueType_IsValid(int value);
constexpr Any_ValueType Any_ValueType_ValueType_MIN = Any_ValueType_NONE;
constexpr Any_ValueType Any_ValueType_ValueType_MAX = Any_ValueType_TIME;
constexpr int Any_ValueType_ValueType_ARRAYSIZE = Any_ValueType_ValueType_MAX + 1;

IGNITION_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Any_ValueType_descriptor();
template<typename T>
inline const std::string& Any_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Any_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Any_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Any_ValueType_descriptor(), enum_t_value);
}
inline bool Any_ValueType_Parse(
    const std::string& name, Any_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Any_ValueType>(
    Any_ValueType_descriptor(), name, value);
}
// ===================================================================

class IGNITION_MSGS_VISIBLE Any :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ignition.msgs.Any) */ {
 public:
  Any();
  virtual ~Any();

  Any(const Any& from);
  Any(Any&& from) noexcept
    : Any() {
    *this = ::std::move(from);
  }

  inline Any& operator=(const Any& from) {
    CopyFrom(from);
    return *this;
  }
  inline Any& operator=(Any&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Any& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Any* internal_default_instance() {
    return reinterpret_cast<const Any*>(
               &_Any_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Any& a, Any& b) {
    a.Swap(&b);
  }
  inline void Swap(Any* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Any* New() const final {
    return CreateMaybeMessage<Any>(nullptr);
  }

  Any* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Any>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Any& from);
  void MergeFrom(const Any& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Any* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ignition.msgs.Any";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ignition_2fmsgs_2fany_2eproto);
    return ::descriptor_table_ignition_2fmsgs_2fany_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Any_ValueType ValueType;
  static constexpr ValueType NONE =
    Any_ValueType_NONE;
  static constexpr ValueType DOUBLE =
    Any_ValueType_DOUBLE;
  static constexpr ValueType INT32 =
    Any_ValueType_INT32;
  static constexpr ValueType STRING =
    Any_ValueType_STRING;
  static constexpr ValueType BOOLEAN =
    Any_ValueType_BOOLEAN;
  static constexpr ValueType VECTOR3D =
    Any_ValueType_VECTOR3D;
  static constexpr ValueType COLOR =
    Any_ValueType_COLOR;
  static constexpr ValueType POSE3D =
    Any_ValueType_POSE3D;
  static constexpr ValueType QUATERNIOND =
    Any_ValueType_QUATERNIOND;
  static constexpr ValueType TIME =
    Any_ValueType_TIME;
  static inline bool ValueType_IsValid(int value) {
    return Any_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    Any_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    Any_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    Any_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return Any_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return Any_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(const std::string& name,
      ValueType* value) {
    return Any_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 5,
    kHeaderFieldNumber = 1,
    kVector3DValueFieldNumber = 7,
    kColorValueFieldNumber = 8,
    kPose3DValueFieldNumber = 9,
    kQuaternionValueFieldNumber = 10,
    kTimeValueFieldNumber = 11,
    kDoubleValueFieldNumber = 3,
    kIntValueFieldNumber = 4,
    kBoolValueFieldNumber = 6,
    kTypeFieldNumber = 2,
  };
  // optional string string_value = 5;
  bool has_string_value() const;
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);

  // optional .ignition.msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::ignition::msgs::Header& header() const;
  ::ignition::msgs::Header* release_header();
  ::ignition::msgs::Header* mutable_header();
  void set_allocated_header(::ignition::msgs::Header* header);

  // optional .ignition.msgs.Vector3d vector3d_value = 7;
  bool has_vector3d_value() const;
  void clear_vector3d_value();
  const ::ignition::msgs::Vector3d& vector3d_value() const;
  ::ignition::msgs::Vector3d* release_vector3d_value();
  ::ignition::msgs::Vector3d* mutable_vector3d_value();
  void set_allocated_vector3d_value(::ignition::msgs::Vector3d* vector3d_value);

  // optional .ignition.msgs.Color color_value = 8;
  bool has_color_value() const;
  void clear_color_value();
  const ::ignition::msgs::Color& color_value() const;
  ::ignition::msgs::Color* release_color_value();
  ::ignition::msgs::Color* mutable_color_value();
  void set_allocated_color_value(::ignition::msgs::Color* color_value);

  // optional .ignition.msgs.Pose pose3d_value = 9;
  bool has_pose3d_value() const;
  void clear_pose3d_value();
  const ::ignition::msgs::Pose& pose3d_value() const;
  ::ignition::msgs::Pose* release_pose3d_value();
  ::ignition::msgs::Pose* mutable_pose3d_value();
  void set_allocated_pose3d_value(::ignition::msgs::Pose* pose3d_value);

  // optional .ignition.msgs.Quaternion quaternion_value = 10;
  bool has_quaternion_value() const;
  void clear_quaternion_value();
  const ::ignition::msgs::Quaternion& quaternion_value() const;
  ::ignition::msgs::Quaternion* release_quaternion_value();
  ::ignition::msgs::Quaternion* mutable_quaternion_value();
  void set_allocated_quaternion_value(::ignition::msgs::Quaternion* quaternion_value);

  // optional .ignition.msgs.Time time_value = 11;
  bool has_time_value() const;
  void clear_time_value();
  const ::ignition::msgs::Time& time_value() const;
  ::ignition::msgs::Time* release_time_value();
  ::ignition::msgs::Time* mutable_time_value();
  void set_allocated_time_value(::ignition::msgs::Time* time_value);

  // optional double double_value = 3;
  bool has_double_value() const;
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);

  // optional int32 int_value = 4;
  bool has_int_value() const;
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional bool bool_value = 6;
  bool has_bool_value() const;
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);

  // optional .ignition.msgs.Any.ValueType type = 2 [default = NONE];
  bool has_type() const;
  void clear_type();
  ::ignition::msgs::Any_ValueType type() const;
  void set_type(::ignition::msgs::Any_ValueType value);

  // @@protoc_insertion_point(class_scope:ignition.msgs.Any)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::ignition::msgs::Header* header_;
  ::ignition::msgs::Vector3d* vector3d_value_;
  ::ignition::msgs::Color* color_value_;
  ::ignition::msgs::Pose* pose3d_value_;
  ::ignition::msgs::Quaternion* quaternion_value_;
  ::ignition::msgs::Time* time_value_;
  double double_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 int_value_;
  bool bool_value_;
  int type_;
  friend struct ::TableStruct_ignition_2fmsgs_2fany_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Any

// optional .ignition.msgs.Header header = 1;
inline bool Any::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::ignition::msgs::Header& Any::header() const {
  const ::ignition::msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Header*>(
      &::ignition::msgs::_Header_default_instance_);
}
inline ::ignition::msgs::Header* Any::release_header() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Any.header)
  _has_bits_[0] &= ~0x00000002u;
  ::ignition::msgs::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Header* Any::mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Any.header)
  return header_;
}
inline void Any::set_allocated_header(::ignition::msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Any.header)
}

// optional .ignition.msgs.Any.ValueType type = 2 [default = NONE];
inline bool Any::has_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Any::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::ignition::msgs::Any_ValueType Any::type() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.type)
  return static_cast< ::ignition::msgs::Any_ValueType >(type_);
}
inline void Any::set_type(::ignition::msgs::Any_ValueType value) {
  assert(::ignition::msgs::Any_ValueType_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  type_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Any.type)
}

// optional double double_value = 3;
inline bool Any::has_double_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Any::clear_double_value() {
  double_value_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double Any::double_value() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.double_value)
  return double_value_;
}
inline void Any::set_double_value(double value) {
  _has_bits_[0] |= 0x00000080u;
  double_value_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Any.double_value)
}

// optional int32 int_value = 4;
inline bool Any::has_int_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Any::clear_int_value() {
  int_value_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Any::int_value() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.int_value)
  return int_value_;
}
inline void Any::set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  int_value_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Any.int_value)
}

// optional string string_value = 5;
inline bool Any::has_string_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Any::clear_string_value() {
  string_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Any::string_value() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.string_value)
  return string_value_.GetNoArena();
}
inline void Any::set_string_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ignition.msgs.Any.string_value)
}
inline void Any::set_string_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ignition.msgs.Any.string_value)
}
inline void Any::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ignition.msgs.Any.string_value)
}
inline void Any::set_string_value(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ignition.msgs.Any.string_value)
}
inline std::string* Any::mutable_string_value() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Any.string_value)
  return string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Any::release_string_value() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Any.string_value)
  if (!has_string_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return string_value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Any::set_allocated_string_value(std::string* string_value) {
  if (string_value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  string_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value);
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Any.string_value)
}

// optional bool bool_value = 6;
inline bool Any::has_bool_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Any::clear_bool_value() {
  bool_value_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Any::bool_value() const {
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.bool_value)
  return bool_value_;
}
inline void Any::set_bool_value(bool value) {
  _has_bits_[0] |= 0x00000200u;
  bool_value_ = value;
  // @@protoc_insertion_point(field_set:ignition.msgs.Any.bool_value)
}

// optional .ignition.msgs.Vector3d vector3d_value = 7;
inline bool Any::has_vector3d_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline const ::ignition::msgs::Vector3d& Any::vector3d_value() const {
  const ::ignition::msgs::Vector3d* p = vector3d_value_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.vector3d_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Vector3d*>(
      &::ignition::msgs::_Vector3d_default_instance_);
}
inline ::ignition::msgs::Vector3d* Any::release_vector3d_value() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Any.vector3d_value)
  _has_bits_[0] &= ~0x00000004u;
  ::ignition::msgs::Vector3d* temp = vector3d_value_;
  vector3d_value_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Vector3d* Any::mutable_vector3d_value() {
  _has_bits_[0] |= 0x00000004u;
  if (vector3d_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Vector3d>(GetArenaNoVirtual());
    vector3d_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Any.vector3d_value)
  return vector3d_value_;
}
inline void Any::set_allocated_vector3d_value(::ignition::msgs::Vector3d* vector3d_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vector3d_value_);
  }
  if (vector3d_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector3d_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector3d_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vector3d_value_ = vector3d_value;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Any.vector3d_value)
}

// optional .ignition.msgs.Color color_value = 8;
inline bool Any::has_color_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::ignition::msgs::Color& Any::color_value() const {
  const ::ignition::msgs::Color* p = color_value_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.color_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Color*>(
      &::ignition::msgs::_Color_default_instance_);
}
inline ::ignition::msgs::Color* Any::release_color_value() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Any.color_value)
  _has_bits_[0] &= ~0x00000008u;
  ::ignition::msgs::Color* temp = color_value_;
  color_value_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Color* Any::mutable_color_value() {
  _has_bits_[0] |= 0x00000008u;
  if (color_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Color>(GetArenaNoVirtual());
    color_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Any.color_value)
  return color_value_;
}
inline void Any::set_allocated_color_value(::ignition::msgs::Color* color_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_value_);
  }
  if (color_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  color_value_ = color_value;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Any.color_value)
}

// optional .ignition.msgs.Pose pose3d_value = 9;
inline bool Any::has_pose3d_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::ignition::msgs::Pose& Any::pose3d_value() const {
  const ::ignition::msgs::Pose* p = pose3d_value_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.pose3d_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Pose*>(
      &::ignition::msgs::_Pose_default_instance_);
}
inline ::ignition::msgs::Pose* Any::release_pose3d_value() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Any.pose3d_value)
  _has_bits_[0] &= ~0x00000010u;
  ::ignition::msgs::Pose* temp = pose3d_value_;
  pose3d_value_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Pose* Any::mutable_pose3d_value() {
  _has_bits_[0] |= 0x00000010u;
  if (pose3d_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Pose>(GetArenaNoVirtual());
    pose3d_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Any.pose3d_value)
  return pose3d_value_;
}
inline void Any::set_allocated_pose3d_value(::ignition::msgs::Pose* pose3d_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose3d_value_);
  }
  if (pose3d_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose3d_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose3d_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pose3d_value_ = pose3d_value;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Any.pose3d_value)
}

// optional .ignition.msgs.Quaternion quaternion_value = 10;
inline bool Any::has_quaternion_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::ignition::msgs::Quaternion& Any::quaternion_value() const {
  const ::ignition::msgs::Quaternion* p = quaternion_value_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.quaternion_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Quaternion*>(
      &::ignition::msgs::_Quaternion_default_instance_);
}
inline ::ignition::msgs::Quaternion* Any::release_quaternion_value() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Any.quaternion_value)
  _has_bits_[0] &= ~0x00000020u;
  ::ignition::msgs::Quaternion* temp = quaternion_value_;
  quaternion_value_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Quaternion* Any::mutable_quaternion_value() {
  _has_bits_[0] |= 0x00000020u;
  if (quaternion_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Quaternion>(GetArenaNoVirtual());
    quaternion_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Any.quaternion_value)
  return quaternion_value_;
}
inline void Any::set_allocated_quaternion_value(::ignition::msgs::Quaternion* quaternion_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quaternion_value_);
  }
  if (quaternion_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quaternion_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  quaternion_value_ = quaternion_value;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Any.quaternion_value)
}

// optional .ignition.msgs.Time time_value = 11;
inline bool Any::has_time_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline const ::ignition::msgs::Time& Any::time_value() const {
  const ::ignition::msgs::Time* p = time_value_;
  // @@protoc_insertion_point(field_get:ignition.msgs.Any.time_value)
  return p != nullptr ? *p : *reinterpret_cast<const ::ignition::msgs::Time*>(
      &::ignition::msgs::_Time_default_instance_);
}
inline ::ignition::msgs::Time* Any::release_time_value() {
  // @@protoc_insertion_point(field_release:ignition.msgs.Any.time_value)
  _has_bits_[0] &= ~0x00000040u;
  ::ignition::msgs::Time* temp = time_value_;
  time_value_ = nullptr;
  return temp;
}
inline ::ignition::msgs::Time* Any::mutable_time_value() {
  _has_bits_[0] |= 0x00000040u;
  if (time_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::ignition::msgs::Time>(GetArenaNoVirtual());
    time_value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ignition.msgs.Any.time_value)
  return time_value_;
}
inline void Any::set_allocated_time_value(::ignition::msgs::Time* time_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_value_);
  }
  if (time_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  time_value_ = time_value;
  // @@protoc_insertion_point(field_set_allocated:ignition.msgs.Any.time_value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

typedef std::unique_ptr<Any> AnyUniquePtr;
typedef std::unique_ptr<const Any> ConstAnyUniquePtr;
typedef std::shared_ptr<Any> AnySharedPtr;
typedef std::shared_ptr<const Any> ConstAnySharedPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace ignition

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ignition::msgs::Any_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ignition::msgs::Any_ValueType>() {
  return ::ignition::msgs::Any_ValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

#ifdef _MSC_VER
#pragma warning(pop)
#endif
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ignition_2fmsgs_2fany_2eproto
