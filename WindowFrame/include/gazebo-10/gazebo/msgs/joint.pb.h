// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: joint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_joint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_joint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "axis.pb.h"
#include "pose.pb.h"
#include "sensor.pb.h"
#pragma GCC system_header
#include <boost/shared_ptr.hpp>
#include <gazebo/util/system.hh>
#include "gazebo/msgs/MsgFactory.hh"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_joint_2eproto GZ_MSGS_VISIBLE
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct GZ_MSGS_VISIBLE TableStruct_joint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_joint_2eproto;
namespace gazebo {
namespace msgs {
class Joint;
class JointDefaultTypeInternal;
GZ_MSGS_VISIBLE extern JointDefaultTypeInternal _Joint_default_instance_;
class Joint_Gearbox;
class Joint_GearboxDefaultTypeInternal;
GZ_MSGS_VISIBLE extern Joint_GearboxDefaultTypeInternal _Joint_Gearbox_default_instance_;
class Joint_Screw;
class Joint_ScrewDefaultTypeInternal;
GZ_MSGS_VISIBLE extern Joint_ScrewDefaultTypeInternal _Joint_Screw_default_instance_;
}  // namespace msgs
}  // namespace gazebo
PROTOBUF_NAMESPACE_OPEN
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Joint* Arena::CreateMaybeMessage<::gazebo::msgs::Joint>(Arena*);
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Joint_Gearbox* Arena::CreateMaybeMessage<::gazebo::msgs::Joint_Gearbox>(Arena*);
template<> GZ_MSGS_VISIBLE ::gazebo::msgs::Joint_Screw* Arena::CreateMaybeMessage<::gazebo::msgs::Joint_Screw>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gazebo {
namespace msgs {

enum Joint_Type : int {
  Joint_Type_REVOLUTE = 1,
  Joint_Type_REVOLUTE2 = 2,
  Joint_Type_PRISMATIC = 3,
  Joint_Type_UNIVERSAL = 4,
  Joint_Type_BALL = 5,
  Joint_Type_SCREW = 6,
  Joint_Type_GEARBOX = 7,
  Joint_Type_FIXED = 8
};
GZ_MSGS_VISIBLE bool Joint_Type_IsValid(int value);
constexpr Joint_Type Joint_Type_Type_MIN = Joint_Type_REVOLUTE;
constexpr Joint_Type Joint_Type_Type_MAX = Joint_Type_FIXED;
constexpr int Joint_Type_Type_ARRAYSIZE = Joint_Type_Type_MAX + 1;

GZ_MSGS_VISIBLE const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Joint_Type_descriptor();
template<typename T>
inline const std::string& Joint_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Joint_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Joint_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Joint_Type_descriptor(), enum_t_value);
}
inline bool Joint_Type_Parse(
    const std::string& name, Joint_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Joint_Type>(
    Joint_Type_descriptor(), name, value);
}
// ===================================================================

class GZ_MSGS_VISIBLE Joint_Gearbox :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Joint.Gearbox) */ {
 public:
  Joint_Gearbox();
  virtual ~Joint_Gearbox();

  Joint_Gearbox(const Joint_Gearbox& from);
  Joint_Gearbox(Joint_Gearbox&& from) noexcept
    : Joint_Gearbox() {
    *this = ::std::move(from);
  }

  inline Joint_Gearbox& operator=(const Joint_Gearbox& from) {
    CopyFrom(from);
    return *this;
  }
  inline Joint_Gearbox& operator=(Joint_Gearbox&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Joint_Gearbox& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joint_Gearbox* internal_default_instance() {
    return reinterpret_cast<const Joint_Gearbox*>(
               &_Joint_Gearbox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Joint_Gearbox& a, Joint_Gearbox& b) {
    a.Swap(&b);
  }
  inline void Swap(Joint_Gearbox* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Joint_Gearbox* New() const final {
    return CreateMaybeMessage<Joint_Gearbox>(nullptr);
  }

  Joint_Gearbox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Joint_Gearbox>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Joint_Gearbox& from);
  void MergeFrom(const Joint_Gearbox& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joint_Gearbox* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Joint.Gearbox";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_joint_2eproto);
    return ::descriptor_table_joint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGearboxReferenceBodyFieldNumber = 1,
    kGearboxRatioFieldNumber = 2,
  };
  // required string gearbox_reference_body = 1;
  bool has_gearbox_reference_body() const;
  void clear_gearbox_reference_body();
  const std::string& gearbox_reference_body() const;
  void set_gearbox_reference_body(const std::string& value);
  void set_gearbox_reference_body(std::string&& value);
  void set_gearbox_reference_body(const char* value);
  void set_gearbox_reference_body(const char* value, size_t size);
  std::string* mutable_gearbox_reference_body();
  std::string* release_gearbox_reference_body();
  void set_allocated_gearbox_reference_body(std::string* gearbox_reference_body);

  // required double gearbox_ratio = 2;
  bool has_gearbox_ratio() const;
  void clear_gearbox_ratio();
  double gearbox_ratio() const;
  void set_gearbox_ratio(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Joint.Gearbox)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gearbox_reference_body_;
  double gearbox_ratio_;
  friend struct ::TableStruct_joint_2eproto;
};
// -------------------------------------------------------------------

class GZ_MSGS_VISIBLE Joint_Screw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Joint.Screw) */ {
 public:
  Joint_Screw();
  virtual ~Joint_Screw();

  Joint_Screw(const Joint_Screw& from);
  Joint_Screw(Joint_Screw&& from) noexcept
    : Joint_Screw() {
    *this = ::std::move(from);
  }

  inline Joint_Screw& operator=(const Joint_Screw& from) {
    CopyFrom(from);
    return *this;
  }
  inline Joint_Screw& operator=(Joint_Screw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Joint_Screw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joint_Screw* internal_default_instance() {
    return reinterpret_cast<const Joint_Screw*>(
               &_Joint_Screw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Joint_Screw& a, Joint_Screw& b) {
    a.Swap(&b);
  }
  inline void Swap(Joint_Screw* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Joint_Screw* New() const final {
    return CreateMaybeMessage<Joint_Screw>(nullptr);
  }

  Joint_Screw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Joint_Screw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Joint_Screw& from);
  void MergeFrom(const Joint_Screw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joint_Screw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Joint.Screw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_joint_2eproto);
    return ::descriptor_table_joint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThreadPitchFieldNumber = 1,
  };
  // required double thread_pitch = 1;
  bool has_thread_pitch() const;
  void clear_thread_pitch();
  double thread_pitch() const;
  void set_thread_pitch(double value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Joint.Screw)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double thread_pitch_;
  friend struct ::TableStruct_joint_2eproto;
};
// -------------------------------------------------------------------

class GZ_MSGS_VISIBLE Joint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gazebo.msgs.Joint) */ {
 public:
  Joint();
  virtual ~Joint();

  Joint(const Joint& from);
  Joint(Joint&& from) noexcept
    : Joint() {
    *this = ::std::move(from);
  }

  inline Joint& operator=(const Joint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Joint& operator=(Joint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Joint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Joint* internal_default_instance() {
    return reinterpret_cast<const Joint*>(
               &_Joint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Joint& a, Joint& b) {
    a.Swap(&b);
  }
  inline void Swap(Joint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Joint* New() const final {
    return CreateMaybeMessage<Joint>(nullptr);
  }

  Joint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Joint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Joint& from);
  void MergeFrom(const Joint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gazebo.msgs.Joint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_joint_2eproto);
    return ::descriptor_table_joint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Joint_Gearbox Gearbox;
  typedef Joint_Screw Screw;

  typedef Joint_Type Type;
  static constexpr Type REVOLUTE =
    Joint_Type_REVOLUTE;
  static constexpr Type REVOLUTE2 =
    Joint_Type_REVOLUTE2;
  static constexpr Type PRISMATIC =
    Joint_Type_PRISMATIC;
  static constexpr Type UNIVERSAL =
    Joint_Type_UNIVERSAL;
  static constexpr Type BALL =
    Joint_Type_BALL;
  static constexpr Type SCREW =
    Joint_Type_SCREW;
  static constexpr Type GEARBOX =
    Joint_Type_GEARBOX;
  static constexpr Type FIXED =
    Joint_Type_FIXED;
  static inline bool Type_IsValid(int value) {
    return Joint_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Joint_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Joint_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Joint_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Joint_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Joint_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Joint_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 3,
    kSensorFieldNumber = 22,
    kNameFieldNumber = 1,
    kParentFieldNumber = 5,
    kChildFieldNumber = 7,
    kPoseFieldNumber = 9,
    kAxis1FieldNumber = 10,
    kAxis2FieldNumber = 11,
    kGearboxFieldNumber = 20,
    kScrewFieldNumber = 21,
    kIdFieldNumber = 2,
    kParentIdFieldNumber = 6,
    kCfmFieldNumber = 12,
    kBounceFieldNumber = 13,
    kVelocityFieldNumber = 14,
    kFudgeFactorFieldNumber = 15,
    kLimitCfmFieldNumber = 16,
    kLimitErpFieldNumber = 17,
    kSuspensionCfmFieldNumber = 18,
    kSuspensionErpFieldNumber = 19,
    kChildIdFieldNumber = 8,
    kTypeFieldNumber = 4,
  };
  // repeated double angle = 3;
  int angle_size() const;
  void clear_angle();
  double angle(int index) const;
  void set_angle(int index, double value);
  void add_angle(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      angle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_angle();

  // repeated .gazebo.msgs.Sensor sensor = 22;
  int sensor_size() const;
  void clear_sensor();
  ::gazebo::msgs::Sensor* mutable_sensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor >*
      mutable_sensor();
  const ::gazebo::msgs::Sensor& sensor(int index) const;
  ::gazebo::msgs::Sensor* add_sensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor >&
      sensor() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // optional string parent = 5;
  bool has_parent() const;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);

  // optional string child = 7;
  bool has_child() const;
  void clear_child();
  const std::string& child() const;
  void set_child(const std::string& value);
  void set_child(std::string&& value);
  void set_child(const char* value);
  void set_child(const char* value, size_t size);
  std::string* mutable_child();
  std::string* release_child();
  void set_allocated_child(std::string* child);

  // optional .gazebo.msgs.Pose pose = 9;
  bool has_pose() const;
  void clear_pose();
  const ::gazebo::msgs::Pose& pose() const;
  ::gazebo::msgs::Pose* release_pose();
  ::gazebo::msgs::Pose* mutable_pose();
  void set_allocated_pose(::gazebo::msgs::Pose* pose);

  // optional .gazebo.msgs.Axis axis1 = 10;
  bool has_axis1() const;
  void clear_axis1();
  const ::gazebo::msgs::Axis& axis1() const;
  ::gazebo::msgs::Axis* release_axis1();
  ::gazebo::msgs::Axis* mutable_axis1();
  void set_allocated_axis1(::gazebo::msgs::Axis* axis1);

  // optional .gazebo.msgs.Axis axis2 = 11;
  bool has_axis2() const;
  void clear_axis2();
  const ::gazebo::msgs::Axis& axis2() const;
  ::gazebo::msgs::Axis* release_axis2();
  ::gazebo::msgs::Axis* mutable_axis2();
  void set_allocated_axis2(::gazebo::msgs::Axis* axis2);

  // optional .gazebo.msgs.Joint.Gearbox gearbox = 20;
  bool has_gearbox() const;
  void clear_gearbox();
  const ::gazebo::msgs::Joint_Gearbox& gearbox() const;
  ::gazebo::msgs::Joint_Gearbox* release_gearbox();
  ::gazebo::msgs::Joint_Gearbox* mutable_gearbox();
  void set_allocated_gearbox(::gazebo::msgs::Joint_Gearbox* gearbox);

  // optional .gazebo.msgs.Joint.Screw screw = 21;
  bool has_screw() const;
  void clear_screw();
  const ::gazebo::msgs::Joint_Screw& screw() const;
  ::gazebo::msgs::Joint_Screw* release_screw();
  ::gazebo::msgs::Joint_Screw* mutable_screw();
  void set_allocated_screw(::gazebo::msgs::Joint_Screw* screw);

  // optional uint32 id = 2;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 parent_id = 6;
  bool has_parent_id() const;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional double cfm = 12;
  bool has_cfm() const;
  void clear_cfm();
  double cfm() const;
  void set_cfm(double value);

  // optional double bounce = 13;
  bool has_bounce() const;
  void clear_bounce();
  double bounce() const;
  void set_bounce(double value);

  // optional double velocity = 14;
  bool has_velocity() const;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);

  // optional double fudge_factor = 15;
  bool has_fudge_factor() const;
  void clear_fudge_factor();
  double fudge_factor() const;
  void set_fudge_factor(double value);

  // optional double limit_cfm = 16;
  bool has_limit_cfm() const;
  void clear_limit_cfm();
  double limit_cfm() const;
  void set_limit_cfm(double value);

  // optional double limit_erp = 17;
  bool has_limit_erp() const;
  void clear_limit_erp();
  double limit_erp() const;
  void set_limit_erp(double value);

  // optional double suspension_cfm = 18;
  bool has_suspension_cfm() const;
  void clear_suspension_cfm();
  double suspension_cfm() const;
  void set_suspension_cfm(double value);

  // optional double suspension_erp = 19;
  bool has_suspension_erp() const;
  void clear_suspension_erp();
  double suspension_erp() const;
  void set_suspension_erp(double value);

  // optional uint32 child_id = 8;
  bool has_child_id() const;
  void clear_child_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 child_id() const;
  void set_child_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .gazebo.msgs.Joint.Type type = 4;
  bool has_type() const;
  void clear_type();
  ::gazebo::msgs::Joint_Type type() const;
  void set_type(::gazebo::msgs::Joint_Type value);

  // @@protoc_insertion_point(class_scope:gazebo.msgs.Joint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > angle_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor > sensor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_;
  ::gazebo::msgs::Pose* pose_;
  ::gazebo::msgs::Axis* axis1_;
  ::gazebo::msgs::Axis* axis2_;
  ::gazebo::msgs::Joint_Gearbox* gearbox_;
  ::gazebo::msgs::Joint_Screw* screw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 parent_id_;
  double cfm_;
  double bounce_;
  double velocity_;
  double fudge_factor_;
  double limit_cfm_;
  double limit_erp_;
  double suspension_cfm_;
  double suspension_erp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 child_id_;
  int type_;
  friend struct ::TableStruct_joint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Joint_Gearbox

// required string gearbox_reference_body = 1;
inline bool Joint_Gearbox::has_gearbox_reference_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Joint_Gearbox::clear_gearbox_reference_body() {
  gearbox_reference_body_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Joint_Gearbox::gearbox_reference_body() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.Gearbox.gearbox_reference_body)
  return gearbox_reference_body_.GetNoArena();
}
inline void Joint_Gearbox::set_gearbox_reference_body(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  gearbox_reference_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.Gearbox.gearbox_reference_body)
}
inline void Joint_Gearbox::set_gearbox_reference_body(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  gearbox_reference_body_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Joint.Gearbox.gearbox_reference_body)
}
inline void Joint_Gearbox::set_gearbox_reference_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gearbox_reference_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Joint.Gearbox.gearbox_reference_body)
}
inline void Joint_Gearbox::set_gearbox_reference_body(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gearbox_reference_body_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Joint.Gearbox.gearbox_reference_body)
}
inline std::string* Joint_Gearbox::mutable_gearbox_reference_body() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.Gearbox.gearbox_reference_body)
  return gearbox_reference_body_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Joint_Gearbox::release_gearbox_reference_body() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.Gearbox.gearbox_reference_body)
  if (!has_gearbox_reference_body()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gearbox_reference_body_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Joint_Gearbox::set_allocated_gearbox_reference_body(std::string* gearbox_reference_body) {
  if (gearbox_reference_body != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gearbox_reference_body_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gearbox_reference_body);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.Gearbox.gearbox_reference_body)
}

// required double gearbox_ratio = 2;
inline bool Joint_Gearbox::has_gearbox_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Joint_Gearbox::clear_gearbox_ratio() {
  gearbox_ratio_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Joint_Gearbox::gearbox_ratio() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.Gearbox.gearbox_ratio)
  return gearbox_ratio_;
}
inline void Joint_Gearbox::set_gearbox_ratio(double value) {
  _has_bits_[0] |= 0x00000002u;
  gearbox_ratio_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.Gearbox.gearbox_ratio)
}

// -------------------------------------------------------------------

// Joint_Screw

// required double thread_pitch = 1;
inline bool Joint_Screw::has_thread_pitch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Joint_Screw::clear_thread_pitch() {
  thread_pitch_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Joint_Screw::thread_pitch() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.Screw.thread_pitch)
  return thread_pitch_;
}
inline void Joint_Screw::set_thread_pitch(double value) {
  _has_bits_[0] |= 0x00000001u;
  thread_pitch_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.Screw.thread_pitch)
}

// -------------------------------------------------------------------

// Joint

// required string name = 1;
inline bool Joint::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Joint::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Joint::name() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.name)
  return name_.GetNoArena();
}
inline void Joint::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.name)
}
inline void Joint::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Joint.name)
}
inline void Joint::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Joint.name)
}
inline void Joint::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Joint.name)
}
inline std::string* Joint::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Joint::release_name() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Joint::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.name)
}

// optional uint32 id = 2;
inline bool Joint::has_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Joint::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Joint::id() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.id)
  return id_;
}
inline void Joint::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  id_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.id)
}

// repeated double angle = 3;
inline int Joint::angle_size() const {
  return angle_.size();
}
inline void Joint::clear_angle() {
  angle_.Clear();
}
inline double Joint::angle(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.angle)
  return angle_.Get(index);
}
inline void Joint::set_angle(int index, double value) {
  angle_.Set(index, value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.angle)
}
inline void Joint::add_angle(double value) {
  angle_.Add(value);
  // @@protoc_insertion_point(field_add:gazebo.msgs.Joint.angle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Joint::angle() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Joint.angle)
  return angle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Joint::mutable_angle() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Joint.angle)
  return &angle_;
}

// optional .gazebo.msgs.Joint.Type type = 4;
inline bool Joint::has_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Joint::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::gazebo::msgs::Joint_Type Joint::type() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.type)
  return static_cast< ::gazebo::msgs::Joint_Type >(type_);
}
inline void Joint::set_type(::gazebo::msgs::Joint_Type value) {
  assert(::gazebo::msgs::Joint_Type_IsValid(value));
  _has_bits_[0] |= 0x00080000u;
  type_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.type)
}

// optional string parent = 5;
inline bool Joint::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Joint::clear_parent() {
  parent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Joint::parent() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.parent)
  return parent_.GetNoArena();
}
inline void Joint::set_parent(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.parent)
}
inline void Joint::set_parent(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  parent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Joint.parent)
}
inline void Joint::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Joint.parent)
}
inline void Joint::set_parent(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  parent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Joint.parent)
}
inline std::string* Joint::mutable_parent() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.parent)
  return parent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Joint::release_parent() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.parent)
  if (!has_parent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return parent_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Joint::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  parent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.parent)
}

// optional uint32 parent_id = 6;
inline bool Joint::has_parent_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Joint::clear_parent_id() {
  parent_id_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Joint::parent_id() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.parent_id)
  return parent_id_;
}
inline void Joint::set_parent_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.parent_id)
}

// optional string child = 7;
inline bool Joint::has_child() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Joint::clear_child() {
  child_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Joint::child() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.child)
  return child_.GetNoArena();
}
inline void Joint::set_child(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  child_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.child)
}
inline void Joint::set_child(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  child_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gazebo.msgs.Joint.child)
}
inline void Joint::set_child(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  child_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gazebo.msgs.Joint.child)
}
inline void Joint::set_child(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  child_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gazebo.msgs.Joint.child)
}
inline std::string* Joint::mutable_child() {
  _has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.child)
  return child_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Joint::release_child() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.child)
  if (!has_child()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return child_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Joint::set_allocated_child(std::string* child) {
  if (child != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  child_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child);
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.child)
}

// optional uint32 child_id = 8;
inline bool Joint::has_child_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Joint::clear_child_id() {
  child_id_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Joint::child_id() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.child_id)
  return child_id_;
}
inline void Joint::set_child_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  child_id_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.child_id)
}

// optional .gazebo.msgs.Pose pose = 9;
inline bool Joint::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline const ::gazebo::msgs::Pose& Joint::pose() const {
  const ::gazebo::msgs::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Pose*>(
      &::gazebo::msgs::_Pose_default_instance_);
}
inline ::gazebo::msgs::Pose* Joint::release_pose() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.pose)
  _has_bits_[0] &= ~0x00000008u;
  ::gazebo::msgs::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Pose* Joint::mutable_pose() {
  _has_bits_[0] |= 0x00000008u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.pose)
  return pose_;
}
inline void Joint::set_allocated_pose(::gazebo::msgs::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.pose)
}

// optional .gazebo.msgs.Axis axis1 = 10;
inline bool Joint::has_axis1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline const ::gazebo::msgs::Axis& Joint::axis1() const {
  const ::gazebo::msgs::Axis* p = axis1_;
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.axis1)
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Axis*>(
      &::gazebo::msgs::_Axis_default_instance_);
}
inline ::gazebo::msgs::Axis* Joint::release_axis1() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.axis1)
  _has_bits_[0] &= ~0x00000010u;
  ::gazebo::msgs::Axis* temp = axis1_;
  axis1_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Axis* Joint::mutable_axis1() {
  _has_bits_[0] |= 0x00000010u;
  if (axis1_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Axis>(GetArenaNoVirtual());
    axis1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.axis1)
  return axis1_;
}
inline void Joint::set_allocated_axis1(::gazebo::msgs::Axis* axis1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis1_);
  }
  if (axis1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      axis1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  axis1_ = axis1;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.axis1)
}

// optional .gazebo.msgs.Axis axis2 = 11;
inline bool Joint::has_axis2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline const ::gazebo::msgs::Axis& Joint::axis2() const {
  const ::gazebo::msgs::Axis* p = axis2_;
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.axis2)
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Axis*>(
      &::gazebo::msgs::_Axis_default_instance_);
}
inline ::gazebo::msgs::Axis* Joint::release_axis2() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.axis2)
  _has_bits_[0] &= ~0x00000020u;
  ::gazebo::msgs::Axis* temp = axis2_;
  axis2_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Axis* Joint::mutable_axis2() {
  _has_bits_[0] |= 0x00000020u;
  if (axis2_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Axis>(GetArenaNoVirtual());
    axis2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.axis2)
  return axis2_;
}
inline void Joint::set_allocated_axis2(::gazebo::msgs::Axis* axis2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(axis2_);
  }
  if (axis2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      axis2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  axis2_ = axis2;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.axis2)
}

// optional double cfm = 12;
inline bool Joint::has_cfm() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Joint::clear_cfm() {
  cfm_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double Joint::cfm() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.cfm)
  return cfm_;
}
inline void Joint::set_cfm(double value) {
  _has_bits_[0] |= 0x00000400u;
  cfm_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.cfm)
}

// optional double bounce = 13;
inline bool Joint::has_bounce() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Joint::clear_bounce() {
  bounce_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double Joint::bounce() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.bounce)
  return bounce_;
}
inline void Joint::set_bounce(double value) {
  _has_bits_[0] |= 0x00000800u;
  bounce_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.bounce)
}

// optional double velocity = 14;
inline bool Joint::has_velocity() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Joint::clear_velocity() {
  velocity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double Joint::velocity() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.velocity)
  return velocity_;
}
inline void Joint::set_velocity(double value) {
  _has_bits_[0] |= 0x00001000u;
  velocity_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.velocity)
}

// optional double fudge_factor = 15;
inline bool Joint::has_fudge_factor() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Joint::clear_fudge_factor() {
  fudge_factor_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline double Joint::fudge_factor() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.fudge_factor)
  return fudge_factor_;
}
inline void Joint::set_fudge_factor(double value) {
  _has_bits_[0] |= 0x00002000u;
  fudge_factor_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.fudge_factor)
}

// optional double limit_cfm = 16;
inline bool Joint::has_limit_cfm() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Joint::clear_limit_cfm() {
  limit_cfm_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double Joint::limit_cfm() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.limit_cfm)
  return limit_cfm_;
}
inline void Joint::set_limit_cfm(double value) {
  _has_bits_[0] |= 0x00004000u;
  limit_cfm_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.limit_cfm)
}

// optional double limit_erp = 17;
inline bool Joint::has_limit_erp() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Joint::clear_limit_erp() {
  limit_erp_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double Joint::limit_erp() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.limit_erp)
  return limit_erp_;
}
inline void Joint::set_limit_erp(double value) {
  _has_bits_[0] |= 0x00008000u;
  limit_erp_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.limit_erp)
}

// optional double suspension_cfm = 18;
inline bool Joint::has_suspension_cfm() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Joint::clear_suspension_cfm() {
  suspension_cfm_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double Joint::suspension_cfm() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.suspension_cfm)
  return suspension_cfm_;
}
inline void Joint::set_suspension_cfm(double value) {
  _has_bits_[0] |= 0x00010000u;
  suspension_cfm_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.suspension_cfm)
}

// optional double suspension_erp = 19;
inline bool Joint::has_suspension_erp() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Joint::clear_suspension_erp() {
  suspension_erp_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline double Joint::suspension_erp() const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.suspension_erp)
  return suspension_erp_;
}
inline void Joint::set_suspension_erp(double value) {
  _has_bits_[0] |= 0x00020000u;
  suspension_erp_ = value;
  // @@protoc_insertion_point(field_set:gazebo.msgs.Joint.suspension_erp)
}

// optional .gazebo.msgs.Joint.Gearbox gearbox = 20;
inline bool Joint::has_gearbox() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Joint::clear_gearbox() {
  if (gearbox_ != nullptr) gearbox_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::gazebo::msgs::Joint_Gearbox& Joint::gearbox() const {
  const ::gazebo::msgs::Joint_Gearbox* p = gearbox_;
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.gearbox)
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Joint_Gearbox*>(
      &::gazebo::msgs::_Joint_Gearbox_default_instance_);
}
inline ::gazebo::msgs::Joint_Gearbox* Joint::release_gearbox() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.gearbox)
  _has_bits_[0] &= ~0x00000040u;
  ::gazebo::msgs::Joint_Gearbox* temp = gearbox_;
  gearbox_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Joint_Gearbox* Joint::mutable_gearbox() {
  _has_bits_[0] |= 0x00000040u;
  if (gearbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Joint_Gearbox>(GetArenaNoVirtual());
    gearbox_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.gearbox)
  return gearbox_;
}
inline void Joint::set_allocated_gearbox(::gazebo::msgs::Joint_Gearbox* gearbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gearbox_;
  }
  if (gearbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gearbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gearbox, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  gearbox_ = gearbox;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.gearbox)
}

// optional .gazebo.msgs.Joint.Screw screw = 21;
inline bool Joint::has_screw() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Joint::clear_screw() {
  if (screw_ != nullptr) screw_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::gazebo::msgs::Joint_Screw& Joint::screw() const {
  const ::gazebo::msgs::Joint_Screw* p = screw_;
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.screw)
  return p != nullptr ? *p : *reinterpret_cast<const ::gazebo::msgs::Joint_Screw*>(
      &::gazebo::msgs::_Joint_Screw_default_instance_);
}
inline ::gazebo::msgs::Joint_Screw* Joint::release_screw() {
  // @@protoc_insertion_point(field_release:gazebo.msgs.Joint.screw)
  _has_bits_[0] &= ~0x00000080u;
  ::gazebo::msgs::Joint_Screw* temp = screw_;
  screw_ = nullptr;
  return temp;
}
inline ::gazebo::msgs::Joint_Screw* Joint::mutable_screw() {
  _has_bits_[0] |= 0x00000080u;
  if (screw_ == nullptr) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Joint_Screw>(GetArenaNoVirtual());
    screw_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.screw)
  return screw_;
}
inline void Joint::set_allocated_screw(::gazebo::msgs::Joint_Screw* screw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete screw_;
  }
  if (screw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      screw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, screw, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  screw_ = screw;
  // @@protoc_insertion_point(field_set_allocated:gazebo.msgs.Joint.screw)
}

// repeated .gazebo.msgs.Sensor sensor = 22;
inline int Joint::sensor_size() const {
  return sensor_.size();
}
inline ::gazebo::msgs::Sensor* Joint::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:gazebo.msgs.Joint.sensor)
  return sensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor >*
Joint::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:gazebo.msgs.Joint.sensor)
  return &sensor_;
}
inline const ::gazebo::msgs::Sensor& Joint::sensor(int index) const {
  // @@protoc_insertion_point(field_get:gazebo.msgs.Joint.sensor)
  return sensor_.Get(index);
}
inline ::gazebo::msgs::Sensor* Joint::add_sensor() {
  // @@protoc_insertion_point(field_add:gazebo.msgs.Joint.sensor)
  return sensor_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gazebo::msgs::Sensor >&
Joint::sensor() const {
  // @@protoc_insertion_point(field_list:gazebo.msgs.Joint.sensor)
  return sensor_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


typedef boost::shared_ptr<gazebo::msgs::Joint> JointPtr;
// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace gazebo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gazebo::msgs::Joint_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gazebo::msgs::Joint_Type>() {
  return ::gazebo::msgs::Joint_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

typedef const boost::shared_ptr<gazebo::msgs::Joint const> ConstJointPtr;
// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_joint_2eproto
